<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>代码规范(1)——编写</title>
    <url>/posts/365c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>命名</h1>
<ul>
<li>别害怕长名称</li>
<li>命名方式要保持一致。使用与模块名一脉相承的短语、名词和动词给函数命名</li>
</ul>
<h1>函数</h1>
<ul>
<li>函数要么做什么事，要么回答什么事(分离指令与询问，询问指的是如if-else)</li>
<li>函数只做一件事，函数中的语句都要在同一抽象层级上</li>
<li>让代码拥有自顶向下的阅读顺序，让每个函数后面都跟着下一抽象层级的函数</li>
<li>「单一出口」规则，其实不是那么有用。保持代码清晰才是最关键的：如果「单一出口」能使这个函数更清楚易读，那么就使用单一出口；否则就不必这么做。(《重构2》)</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单一出口</span></span><br><span class="line">double <span class="title function_">getPayAmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">   double result;</span><br><span class="line">   <span class="keyword">if</span> (_isDead) result = <span class="title function_">deadAmount</span>();</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (_isSeparated) result = <span class="title function_">separatedAmount</span>();</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (_isRetired) result = <span class="title function_">retiredAmount</span>();</span><br><span class="line">           <span class="keyword">else</span> result = <span class="title function_">normalPayAmount</span>();</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//清晰易读</span></span><br><span class="line">  double <span class="title function_">getPayAmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (_isDead) <span class="keyword">return</span> <span class="title function_">deadAmount</span>();</span><br><span class="line">   <span class="keyword">if</span> (_isSeparated) <span class="keyword">return</span> <span class="title function_">separatedAmount</span>();</span><br><span class="line">   <span class="keyword">if</span> (_isRetired) <span class="keyword">return</span> <span class="title function_">retiredAmount</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">normalPayAmount</span>();</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="参数">参数</h2>
<ul>
<li>有足够的理由才能用三个以上参数</li>
<li>如果函数要对输入参数进行转换操作，转换结果就该体现为返回值</li>
<li>如果函数看来需要两个、三个或三个以上参数，就说明其中一些参数应该封装为类了</li>
<li>有可变参数的函数可能是一元、二元甚至三元，超过这个数量就可能要犯错了</li>
<li>对于一元函数，函数和参数应当形成一种非常良好的动词/名词对形式</li>
</ul>
<h2 id="错误处理">错误处理</h2>
<ul>
<li>try/catch代码块把错误处理与正常流程混为一谈，最好把try和catch代码块的主体部分抽离出来，另外形成函数</li>
<li>遇到错误时，使用异常而非返回码</li>
<li>在编写可能抛出异常的代码时，最好先写try-catch-finally语句</li>
<li>每个异常，都应当提供足够的环境说明，以便判断错误的来源和处所</li>
<li>创建一个类或配置一个对象，用来处理特例，异常行为被封装到特例对象中</li>
<li>创建信息充分的错误消息，并和异常一起传递出去</li>
<li>自定义的异常类最重要的考虑是它们如何被捕获</li>
<li>将第三方API打包，方便将一些复杂的异常捕获过程封装</li>
<li>尽量别返回null值，也别传递null值</li>
</ul>
<h1>对象</h1>
<ul>
<li>得墨忒耳律（The Law of Demeter）：模块不应了解它所操作对象的内部情形，意味着对象不应通过存取器曝露其内部结构，因为这样更像是曝露而非隐藏其内部结构</li>
<li>最为精练的数据结构，是一个只有公共变量、没有函数的类，这种被称为数据传送对象，或DTO（Data Transfer Objects）</li>
</ul>
<h1>类</h1>
<ul>
<li>放-闭合原则（OCP）：类应当对扩展开放(通过扩展系统而非修改现有代码来添加新特性)，对修改封闭</li>
<li>依赖倒置原则（Dependency Inversion Principle,DIP），类应该依赖于抽象而不是依赖于具体细节</li>
<li>内聚性强，如果一个类的每个变量都被每个方法所使用，则该类具有最大的内聚性</li>
<li>职责单一，类的名称应当描述其权责</li>
<li>类应该从一级变量列表开始，如果有公共静态变量，应该先出现，然后是私有静态变量，以及实体变量，很少会有公共变量</li>
<li>公共函数应该跟在变量列表之后</li>
<li>保持变量和工具函数的私有性，但并不执着于此</li>
<li>保持函数和参数列表短小的策略，有时会导致为一组子集方法所用的实体变量数量增加，此时应当尝试将这些变量和方法分拆到两个或多个类中，让新的类更为内聚</li>
<li>将大函数拆为许多小函数，往往也是将类拆分为多个小类的时机</li>
</ul>
<h1>注释</h1>
<ul>
<li>注释总是一种失败</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Git原理(2)——Git状态</title>
    <url>/posts/a57b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>三个工作区域：Git仓库、工作目录以及暂存区域</h1>
<table>
<thead>
<tr>
<th>工作区域</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Git 仓库(Repository)</td>
<td>1.保存项目的元数据和对象数据库的地方<br>2.从其它计算机克隆</td>
</tr>
<tr>
<td>仓库时，拷贝的就是这里的数据</td>
<td></td>
</tr>
<tr>
<td>工作目录(Working  Directory)</td>
<td>1. 对项目某个版本独立提取出的内容<br>2.提取出来后在磁盘上供使用或修改</td>
</tr>
<tr>
<td>暂存区(Staging Area一个文件)</td>
<td>保存了下次将提交的文件列表信息</td>
</tr>
</tbody>
</table>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart [LR]
    A[工作目录(修改并暂存文件)] --快照--&gt; B[暂存区]
    B --提交更新--&gt; C[Git仓库(永久存入提交的快照)]
  </pre></div>
<h1>状态</h1>
<h2 id="区域相关的三个状态：已提交、已修改和已暂存">区域相关的三个状态：已提交、已修改和已暂存</h2>
<table>
<thead>
<tr>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>已提交（committed）</td>
<td>数据已经安全的保存在本地数据库中</td>
</tr>
<tr>
<td>已修改（modified）</td>
<td>修改了文件，但还没保存到数据库中</td>
</tr>
<tr>
<td>已暂存（staged）</td>
<td>对已修改文件的当前版本做了标记，使之包含在下次提交的快照中</td>
</tr>
</tbody>
</table>
<h2 id="文件状态">文件状态</h2>
<h3 id="跟踪-git-add，添加内容到下一次提交">跟踪(git add，添加内容到下一次提交)</h3>
<ul>
<li>工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪</li>
</ul>
<ol>
<li>已跟踪：已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录</li>
<li>未跟踪：除已跟踪文件以外的所有其它文件都属于未跟踪文件</li>
</ol>
<ul>
<li>初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态</li>
<li>新建文件出现在 Untracked files 下面。未跟踪的文件意味着 Git在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围</li>
<li>git add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件</li>
<li>还能用于合并时把有冲突的文件标记为已解决状态</li>
</ul>
<h3 id="状态变化周期">状态变化周期</h3>
<p><strong>Untracked</strong>–add–&gt;<strong>Staged</strong>–remove–&gt;Untracked<br>
<strong>Umodified</strong>–edit–&gt;<strong>Modified</strong><br>
<strong>Modified</strong>–&gt;stage–&gt;<strong>Staged</strong>–commit–&gt;<strong>Unmodifiled</strong></p>
<h2 id="提交">提交</h2>
<p>提交时记录的是放在暂存区域的快照。任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。</p>
<h2 id="移除-git-rm，从暂存区域移除并从工作目录中删除指定的文件">移除(git rm，从暂存区域移除并从工作目录中删除指定的文件)</h2>
<ol>
<li>rm FILENAME，该命令仅简单地从工作目录中手工删除文件，但仍会保留在暂存区</li>
<li>此时再执行git rm，下一次提交时，该文件就不再纳入版本管理了</li>
<li>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f。这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复</li>
<li>从暂存区域移除，但仍然希望保留在当前工作目录中：git rm --cached</li>
<li>后面可接glob模式</li>
</ol>
<h2 id="移动-git-mv-源文件-目标文件">移动(git mv 源文件 目标文件)</h2>
<ul>
<li>Git 并不显式跟踪文件移动操作。如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。不过 Git 非常聪明，它会推断出究竟发生了什么</li>
<li>相当于执行了mv、git rm 、git add</li>
</ul>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>代码规范(3)——坏代码示例</title>
    <url>/posts/ef6c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>类型</h1>
<p>神秘命名<br>
重复代码<br>
过长函数<br>
过长参数列表<br>
全局数据： 全局数据的问题在于，从代码库的任何一个角落都可以修改它，而且没有任何机制可以探测出到底哪段代码做出了修改。一次又一次，全局数据造成了一些诡异的 BUG，而问题的根源却在遥远的别处。<br>
可变数据： 对数据的修改经常导致出乎意料的结果和难以发现的 BUG。我在一处更新数据，却没有意识到软件中的另一处期望着完全不同的数据。<br>
发散式变化： 模块经常因为不同的原因在不同的方向上发生变化。<br>
散弹式修改： 每遇到某种变化，你都必须在许多不同的类内做出许多小修改。<br>
依恋情结： 所谓模块化，就是力求将代码分出区域，最大化区域内部的交互、最小化跨区域的交互。但有时你会发现，一个函数跟另一个模块中的函数或者数据交流格外频繁，远胜于在自己所处模块内部的交流。<br>
数据泥团： 你经常在很多地方看到相同的三四项数据：两个类中相同的字段、许多函数签名中相同的参数。<br>
基本类型偏执： 很多程序员不愿意创建对自己的问题域有用的基本类型，如钱、坐标、范围等。<br>
重复的 switch： 在不同的地方反复使用相同的 switch 逻辑。问题在于：每当你想增加一个选择分支时，必须找到所有的 switch，并逐一更新。<br>
循环语句： 我们发现，管道操作（如 filter 和 map）可以帮助我们更快地看清被处理的元素一级处理它们的动作。<br>
冗余的元素<br>
夸夸其谈通用性： 函数或类的唯一用户是测试用例。<br>
临时字段： 有时你会看到这样的类：其内部某个字段仅为某种特定情况而定。这样的代码让人不理解，因为你通常认为对象在所有时候都需要它的所有字段。在字段未被使用的情况下猜测当初设置它的目的，会让你发疯。<br>
过长的消息链<br>
中间人： 过度运用委托。<br>
内幕交易： 软件开发者喜欢在模块之间筑起高墙，极其反感在模块之间大量交换数据，因为这会增加模块间的耦合。在实际情况里，一定的数据交换不可避免，但我们必须尽量减少这种情况，并把这种交换都放到明面上来。<br>
过大的类<br>
异曲同工的类<br>
纯数据类： 所谓纯数据类是指：他们拥有一些字段，以及用于访问（读写）这些字段的函数，除此之外一无长物。纯数据类常常意味着行为被放在了错误的地方。也就是说，只要把处理数据的行为从客户端搬移到纯数据类里来，就能使情况大为改观。<br>
被拒绝的遗赠： 拒绝继承超类的实现，我们不介意：但如果拒绝支持超类的接口，这就难以接受了。<br>
注释： 当你感觉需要纂写注释时，请先尝试重构，试着让所有注释都变得多余。</p>
]]></content>
  </entry>
  <entry>
    <title>代码规范(2)——重构</title>
    <url>/posts/3387/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>何时</h1>
<ul>
<li>事不过三，三则重构</li>
<li>当我需要理解其工作原理时，对其进行重构才会有价值</li>
<li>重写比重构容易</li>
</ul>
<h1>重构的时机(1)——见机行事</h1>
<p>大部分重构应该是不起眼的、见机行事的。重构不是与编程割裂的行为</p>
<h2 id="预备性重构">预备性重构</h2>
<ul>
<li>重构的最佳时机就在添加新功能之前</li>
</ul>
<h2 id="帮助理解的重构">帮助理解的重构</h2>
<ul>
<li></li>
</ul>
<h2 id="捡垃圾式重构">捡垃圾式重构</h2>
<ul>
<li>不想从眼下正要完成的任务上跑题太多，但我也不想把垃圾留在原地，给将来的修改增加麻烦</li>
<li>如果我发现的垃圾很容易重构，我会马上重构它；如果重构需要花一些精力，我可能会拿一张便笺纸把它记下来，完成当下的任务再回来重构它。</li>
</ul>
<h1>重构的时机(2)——长期重构</h1>
<ul>
<li>每当有人靠近“重构区”的代码，就把它朝想要改进的方向推动一点</li>
<li>每次小改动之后，整个系统仍然照常工作</li>
</ul>
<h1>重构方法</h1>
<h2 id="测试用例">测试用例</h2>
<p>重构之前，先保证一组可靠的测试用例（有自我检验的能力）</p>
<h2 id="重构清单">重构清单</h2>
<ol>
<li>函数</li>
</ol>
<table>
<thead>
<tr>
<th>重构方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>提炼</td>
<td>过长的函数，或者一段需要注释才能理解的代码，将其中一段代码提取到一个独立函数中，并让函数名称解释该函数的用途</td>
</tr>
<tr>
<td>内联</td>
<td>1. 内联函数：如果一个函数的名称和函数体一样清晰易懂，则去掉函数调用，在调用点直接使用函数体<br>2.内联临时变量：如果一个临时变量，只被一个简单表达式赋值一次，而它妨碍了其他重构手法。则将所有对该变量的引用替换为对应的赋值表达式</td>
</tr>
<tr>
<td>临时变量</td>
<td>1.以查询取代临时变量：临时变量保存了一个表达式的运算结果，将这个表达式提取到一个函数中，将对这个临时变量的所有引用替换为对新函数的调用。该新函数也可以被其它函数调用<br>2.引入解释型变量：将复杂表达式（或一部分）赋值给一个临时变量，用变量的名称来解释表达式的意图<br>3.分解：一个临时变量被多次赋值，但它既不是循环变量，也不是用于收集计算结果，说明它承担了多个责任，有多个含义，则应该在每次赋值的时候使用单独的临时变量<br>4.移除对参数的赋值：如果需要在函数内对参数赋值，请使用一个临时变量取代参数</td>
</tr>
<tr>
<td>以函数对象取代函数</td>
<td>1.大型函数中对局部变量的使用使你无法采用 提取函数（Extract Method）。 将这个函数放进一个单独对象中，局部变量就成了对象内的字段<br>2.然后你可以在同一个对象中将这个大型函数分解为多个小型函数</td>
</tr>
<tr>
<td>替换算法</td>
<td>用一个更好的算法直接替换原有的算法</td>
</tr>
<tr>
<td>函数改名</td>
<td>复杂的处理过程分解成小函数</td>
</tr>
<tr>
<td>添加参数</td>
<td>1.函数需要额外的信息，可以考虑给函数添加新的参数<br>2.添加新参数之前考虑：现有参数是否无法满足需要？是否可以通过其它函数调用获得需要的数据？</td>
</tr>
<tr>
<td>移除参数</td>
<td>函数不再需要某个参数，将其移除</td>
</tr>
<tr>
<td>查询函数和修改函数分离</td>
<td>1.某个函数既返回对象状态，又修改对象状态，建议分离成查询和修改两个独立的函数<br>2.任何有返回值的函数，都不应该有看得到的副作用</td>
</tr>
<tr>
<td>令函数携带参数</td>
<td>两个函数做着类似的工作，但因少数几个值导致行为略有不同，可以考虑合并为一个函数，通过参数处理变化的部分</td>
</tr>
<tr>
<td>以明确函数取代参数</td>
<td>一个函数，根据参数的值不同采取不同的行为，建议针对每一个参数值，建立独立的函数，调用方可以直接调用对应的函数，就可以避免条件表达式</td>
</tr>
<tr>
<td>以函数取代参数</td>
<td>通过其它途径（如调用其它的函数）获得参数值，就应该去掉参数值，缩短参数列的长度</td>
</tr>
<tr>
<td>引入参数对象</td>
<td>一组参数总是同时出现在不同的函数参数列表，建议使用一个对象将这些数据组织到一起，可以缩短参数列的长度</td>
</tr>
<tr>
<td>保持对象完整</td>
<td>一个对象的若干数据作为参数传给一个函数，可以考虑直接将该对象作为参数传递<br>传递对象不能导致依赖关系恶化，且调用函数不能使用了对象的很多项数据</td>
</tr>
<tr>
<td>移除设值函数</td>
<td>类中的某个字段在对象创建后不应该改变，去掉该字段的设值函数</td>
</tr>
<tr>
<td>隐藏函数</td>
<td>某个函数没有被外部类使用到，将该函数设置为private</td>
</tr>
<tr>
<td>以工厂函数取代构造函数</td>
<td>创建对象时还需要执行一些额外的操作，建议将构造函数替换为工厂函数</td>
</tr>
<tr>
<td>封装向下转型</td>
<td>函数的返回值需要调用者进行向下转型(downcast)，建议在该函数内执行向下转型，返回调用者需要的类型</td>
</tr>
<tr>
<td>以异常取代错误码</td>
<td>果某个函数返回特定的错误码表示某种异常情况，建议直接抛出异常</td>
</tr>
<tr>
<td>以测试取代异常</td>
<td>1.面对调用者可以预先检查的条件，调用者应该先检查该条件<br>2.不要通过捕获异常去处理可以预见的逻辑。不要滥用异常，异常应该只用于异常的、罕见的行为</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>对象</li>
</ol>
<table>
<thead>
<tr>
<th>重构方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>搬移</td>
<td>1.函数：如果一个函数与另一个类的交流比所在类更多，应该考虑将该函数搬移到另一个类。如果一个类有太多行为，或一个类与另一个类有太多合作而形成高度耦合，就应该考虑是否可以通过搬移函数进行重构<br>2.字段：如果一个类中的字段，被另一个类更多地用到，应该考虑将该字段搬移到另一个类中</td>
</tr>
<tr>
<td>提炼类</td>
<td>某个类做了多个事情，数据和函数总是一起出现或一起变化，应该将相应的数据和函数提炼到新的类中。</td>
</tr>
<tr>
<td>内联类</td>
<td>某个类没有承担什么责任，不再有单独存在的理由，将这个类的所有特性内联到另一个类中，将原类移除</td>
</tr>
<tr>
<td>隐藏委托</td>
<td>1.通过封装，对外部客户隐藏内部的委托细节，避免内部的委托发生变化波及客户<br>2.可以在服务对象(中介，客户通过其得到另一对象)上放置委托函数，将委托关系隐藏起来，从而去除这种依赖。这么一来，即便将来发生委托关系上的变化，变化也将被限制在服务对象中，不会波及客户。</td>
</tr>
<tr>
<td>移除中间人</td>
<td>服务类做了太多的简单委托，移除服务类，让客户直接调用委托类</td>
</tr>
<tr>
<td>引入外部函数</td>
<td>客户类需要的少数几个功能，服务类不能提供，而且不能修改服务类源码，则可以在客户类创建函数提供所需的功能</td>
</tr>
<tr>
<td>引入本地扩展</td>
<td>需要在客户类建立大量的外部函数，则应该考虑将这些函数组织到新的类中，该新类应该是源类的子类，即本地扩展</td>
</tr>
</tbody>
</table>
<ol start="3">
<li>数据</li>
</ol>
<table>
<thead>
<tr>
<th>重构方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>自封装字段</td>
<td>1.在一个类中，可以直接访问<br>2.如果为了在子类中改变获取数据的方式（如延迟获取）等，则可以通过取值函数/设置函数访问</td>
</tr>
<tr>
<td>以对象取代数据值</td>
<td>一个数据项，需要与其它的数据与行为放在一起才有意义，将数据项变成对象</td>
</tr>
<tr>
<td>以对象取代数组</td>
<td>一个数组，其中每个元素代表都是不同的东西，建议以对象代替数组，将数组中的每个元素作为对象的字段</td>
</tr>
<tr>
<td>复制“被监视数据”</td>
<td>将处理用户界面和处理业务逻辑的代码分开</td>
</tr>
<tr>
<td>以字面常量取代魔法数</td>
<td>一个字面数值，带有特殊含义，将其替换为有意义的常量，通过命名表达其含义</td>
</tr>
<tr>
<td>封装字段</td>
<td>有public的字段，将其改为private，并提供相应的访问函数</td>
</tr>
<tr>
<td>封装集合</td>
<td>1.一个函数返回一个集合，建议返回该集合的一个只读副本<br>2.不要提供对集合的设值（setter）函数，应该提供给集合添加/删除元素的函数</td>
</tr>
<tr>
<td>以类取代类型码</td>
<td>类中有一个数值类型码，但并不影响类的行为，以一个新的类替换类型码</td>
</tr>
<tr>
<td>以字段取代子类</td>
<td>各个子类的唯一差别是返回常量值的函数上，建议在父类中添加表示该常量值的字段，并通过函数返回，然后移除所有的子类</td>
</tr>
</tbody>
</table>
<ol start="3">
<li>简化条件表达式</li>
</ol>
<table>
<thead>
<tr>
<th>重构方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>分解条件表达式</td>
<td>一个复杂的条件表达式(if-else)，将每部分都提炼成单独的函数</td>
</tr>
<tr>
<td>合并条件表达式</td>
<td>1.多个条件表达式返回同样的结果，建议试用&amp;或</td>
</tr>
<tr>
<td>合并重复的条件片段</td>
<td>条件表达式的每个分支上都有相同的代码，则应该将重复代码移到条件表达式之外</td>
</tr>
<tr>
<td>移除控制标记</td>
<td>用break或return语句替换控制标记(根据不同的条件给布尔变量赋予不同的值的布尔表达式)，提前返回或退出</td>
</tr>
<tr>
<td>卫语句取代嵌套条件表达式</td>
<td>条件表达式中，有些分支是特殊情况，建议试用卫语句提前返回</td>
</tr>
<tr>
<td>多态取代条件表达式</td>
<td>使用多态替换根据<strong>对象类型的不同</strong>执行不同的行为的条件表达式：为<strong>每个不同类型建立一个子类</strong>，将分支中的内容放到子类的覆写方法中</td>
</tr>
<tr>
<td>引入Null对象</td>
<td>需要检查对象是否为null，可以考虑引入null对象。null对象是正常对象的一个子类，覆写的方法使用空实现，一般是单例，不可变</td>
</tr>
<tr>
<td>引入断言</td>
<td>1.对程序状态做出某种假设，以断言明确表明这种假设。断言应该总是为真，如果它失败，表明程序员犯了错误，应该抛出异常<br>2.只用于检查一定必须为真的条件，而不是用于检查你认为应该为真的条件<br>3. 生产环境的代码应该将断言全部都删掉</td>
</tr>
</tbody>
</table>
<ol start="4">
<li>概括关系</li>
</ol>
<table>
<thead>
<tr>
<th>重构方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>字段上移</td>
<td>两个子类有相同的字段，将该字段移到超类中去</td>
</tr>
<tr>
<td>函数上移</td>
<td>函数在各个子类中产生完全相同的结果，将该函数移到超类</td>
</tr>
<tr>
<td>构造函数本体上移</td>
<td>子类中构造函数函数体几乎完全一致，在超类中新建一个构造函数，并在各个子类的构造函数中调用它</td>
</tr>
<tr>
<td>函数下移</td>
<td>超类中的某个函数只是被部分子类用到，将这个函数移到需要它的子类中去</td>
</tr>
<tr>
<td>字段下移</td>
<td>超类中的某个字段只是被部分子类用到，将这个字段移到需要它的子类中去</td>
</tr>
<tr>
<td>提炼子类</td>
<td>类的某些特性只被某些（不是全部）实例用到，新建一个子类，将特定的属性移到子类中去</td>
</tr>
<tr>
<td>提炼超类</td>
<td>两个类有相似特性，建立一个超类，将相同的特性移到超类</td>
</tr>
<tr>
<td>折叠继承体系</td>
<td>子类和超类并无太大区别，将它们合并</td>
</tr>
<tr>
<td>塑造模板函数</td>
<td>1.子类，其中的某个函数以相同顺序执行大致相近的操作，但是各操作不完全相同<br>2.将这些操作分别放进独立函数中，并保持它们都有相同的签名，然后将原函数上移至超类，子类重写实现不同的逻辑。</td>
</tr>
<tr>
<td>以委托取代继承</td>
<td>子类只使用了超类接口中的一部分，或者子类从超类继承了一大堆并不需要的数据，建议将继承改为委托</td>
</tr>
<tr>
<td>以继承取代委托</td>
<td>某个类使用了委托类中的所有函数，需要编写所有简单的委托函数，建议将委托改为继承</td>
</tr>
</tbody>
</table>
<h2 id="示例">示例</h2>
<ul>
<li>把意图和实现分开</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> <span class="title function_">printOwing</span>(<span class="params">double amount</span>) &#123;</span><br><span class="line">     <span class="title function_">printBanner</span>();</span><br><span class="line">     <span class="title function_">printDetails</span>(amount);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">void</span> <span class="title function_">printDetails</span> (double amount) &#123;</span><br><span class="line">     <span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span> (<span class="string">&quot;name:&quot;</span> + _name);</span><br><span class="line">     <span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span> (<span class="string">&quot;amount&quot;</span> + amount);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>用一个良好命名的临时变量来解释对应条件子句的意义，使语义更加清晰</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">final <span class="built_in">boolean</span> isMacOs     = platform.<span class="title function_">toUpperCase</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;MAC&quot;</span>) &gt; -<span class="number">1</span>;</span><br><span class="line">  final <span class="built_in">boolean</span> isIEBrowser = browser.<span class="title function_">toUpperCase</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;IE&quot;</span>)  &gt; -<span class="number">1</span>;</span><br><span class="line">  final <span class="built_in">boolean</span> wasResized  = resize &gt; <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (isMacOs &amp;&amp; isIEBrowser &amp;&amp; <span class="title function_">wasInitialized</span>() &amp;&amp; wasResized) &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>以管道(filter+map)取代循环</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = input</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">job</span> === <span class="string">&quot;programer&quot;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">name</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>合理的封装。能够帮助我们隐藏细节并且，能够更好的应对变化，当我们发现我们的类太大而不容易理解的时候，可以考虑使用提炼类的方法</p>
</li>
<li>
<p>分解条件式： 把一段 「复杂的条件逻辑」 分解成多个独立的函数</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原代码</span></span><br><span class="line"><span class="keyword">if</span> (date.<span class="property">before</span> (<span class="variable constant_">SUMMER_START</span>) || date.<span class="title function_">after</span>(<span class="variable constant_">SUMMER_END</span>))</span><br><span class="line">         charge = quantity * _winterRate + _winterServiceCharge;</span><br><span class="line">     <span class="keyword">else</span> charge = quantity * _summerRate;</span><br><span class="line"><span class="comment">//分解</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">notSummer</span>(date))</span><br><span class="line">         charge = <span class="title function_">winterCharge</span>(quantity);</span><br><span class="line">     <span class="keyword">else</span> charge = <span class="title function_">summerCharge</span> (quantity);</span><br></pre></td></tr></table></figure>
<ul>
<li>以卫语句(guard clauses，给某一条分支以特别的重视)取代嵌套条件式</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/posts/d104/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <tags>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Git原理(1)——Git特性</title>
    <url>/posts/9b4d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>一、对待数据的方式：快照流</h1>
<ul>
<li>把数据看作是对小型文件系统的一组快照。</li>
</ul>
<ol>
<li>每次提交更新或在 Git 中保存项目状态时，对<strong>当时的全部文件</strong>制作一个<strong>快照</strong>并保存这个快照的<strong>索引</strong></li>
<li>如果文件没有修改，Git 不再重新存储该文件，而是<strong>只保留一个链接</strong>指向之前存储的文件</li>
</ol>
<h1>二、近乎所有操作都是本地执行</h1>
<p>绝大多数操作都只需要访问本地文件和资源</p>
<h1>三、保证完整性</h1>
<ul>
<li>所有数据在存储前都计算校验和(SHA-1 散列)，然后以校验和来引用</li>
<li>不可能在 Git 不知情时更改任何文件内容或目录内容</li>
<li>Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名</li>
</ul>
<h1>四、一般只添加数据</h1>
<p>Git 操作，几乎只往 Git 数据库中增加数据</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git快速入门</title>
    <url>/posts/cc3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>提交规范</h1>
<h2 id="commit信息">commit信息</h2>
<p>commit message格式:<br>
<type>(<scope>): <subject></p>
<ol>
<li>
<p>type(必须)<br>
用于说明git commit的类别，只允许使用下面的标识。<br>
• feat：新功能（feature）。<br>
• fix/to：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。<br>
• fix：产生diff并自动修复此问题。适合于一次提交直接修复问题<br>
• to：只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix<br>
• docs：文档（documentation）。<br>
• style：格式（不影响代码运行的变动）。<br>
• refactor：重构（即不是新增功能，也不是修改bug的代码变动）。<br>
• perf：优化相关，比如提升性能、体验。<br>
• test：增加测试。<br>
• chore：构建过程或辅助工具的变动。<br>
• revert：回滚到上一个版本。<br>
• merge：代码合并。<br>
• sync：同步主线或分支的Bug。</p>
</li>
<li>
<p>scope(可选)<br>
这里是否必须，以及范围是什么内容，可以看实际公司的情况。<br>
scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。<br>
例如在Angular，可以是location，browser，compile，compile，rootScope， ngHref，ngClick，ngView等。如果你的修改影响了不止一个scope，你可以使用*代替。</p>
</li>
<li>
<p>subject(必须)<br>
subject是commit目的的简短描述，不超过50个字符。<br>
• 结尾不加句号或其他标点符号。<br>
• 根据以上规范git commit message将是如下的格式：<br>
fix(DAO):用户查询缺少username属性<br>
feat(Controller):用户查询接口开发</p>
</li>
</ol>
<h2 id="版本号">版本号</h2>
<p>V1.0.0.20211028_base</p>
<p>解读一下这个版本号命名规范：</p>
<ul>
<li>第一位：版本前缀（V）<br>
V （version）英文版本的缩写</li>
<li>第二位：主版本号（V1）<br>
当功能模块有较大的变动，比如增加模块或是整体架构发生变化。此版本号由项目经理决定是否修改。</li>
<li>第三位：副版本号（V1.0）<br>
当功能有一定的增加或变化，比如增加了对权限控制、增加自定义视图等功能。此版本号由项目经理决定是否修改。</li>
<li>第四位：修订版本号（V1.0.0）<br>
一般是 Bug 修复或是一些小的变动，要经常发布修订版，时间间隔不限，修复一个严重的bug即可发布一个修订版。此版本号由项目经理决定是否修改。</li>
<li>第五位：日期版本号（V1.0.0.20211028_base）<br>
用于记录修改项目的当前日期，每天对项目的修改都需要更改日期版本号。此版本号由开发人员决定是否修改。</li>
<li>第六位：希腊字母版本号（V1.0.0.20211028_base）<br>
希腊字母版本号共有五种，分别为base、alpha、beta 、RC 、 release<br>
Base： 此版本表示该软件仅仅是一个假页面链接，通常包括所有的功能和页面布局，但是页面中的功能都没有做完整的实现，只是做为整体网站的一个基础架构。<br>
Alpha ： 软件的初级版本，表示该软件在此阶段以实现软件功能为主，通常只在软件开发者 内部交流，一般而言，该版本软件的Bug较多，需要继续修改，是测试版本。测试人员提交Bug经开发人员修改确认之后，发布到测试网址让测试人员测试，此时可将软件版本标注为alpha版。<br>
Beta ： 该版本相对于Alpha 版已经有了很大的进步，消除了严重错误，但还需要经过多次测试来进一步消除，此版本主要的修改对象是软件的UI。修改的的Bug 经测试人员测试确认后可发布到外网上，此时可将软件版本标注为 beta版。<br>
RC ： 该版本已经相当成熟了，基本上不存在导致错误的Bug，与即将发行的正式版本相差无几。<br>
Release： 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式的版本，是最终交付用户使用的一个版本。该版本有时也称标准版。</li>
</ul>
<h1>常用命令</h1>
<p>配置Git</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//升级</span></span><br><span class="line">git clone <span class="attr">git</span>:<span class="comment">//git.kernel.org/pub/scm/git/git.git</span></span><br><span class="line"><span class="comment">//设置用户信息</span></span><br><span class="line"><span class="comment">// --global 选项，该命令只需要运行一次，之后无论你在该系统上做任何事情， Git 都会使用那些信息</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> johndoe<span class="meta">@example</span>.<span class="property">com</span></span><br><span class="line"><span class="comment">//配置默认文本编辑器</span></span><br><span class="line">git config --<span class="variable language_">global</span> core.<span class="property">editor</span> emacs</span><br></pre></td></tr></table></figure>
<p>查看信息</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看提交历史</span></span><br><span class="line"><span class="comment">//会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明</span></span><br><span class="line">git log</span><br><span class="line">git -p -数字<span class="comment">//显示每次提交的内容差异，后面的“数字”显示最近n次提交</span></span><br><span class="line">git log -stat<span class="comment">//简略的统计信息</span></span><br><span class="line">git log  --pretty = 格式选项<span class="comment">//指定展示提交历史的格式</span></span><br><span class="line"><span class="comment">//列出所有 Git 当时能找到的配置</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="comment">//检查 Git 的某一项配置</span></span><br><span class="line">git config &lt;key&gt;</span><br><span class="line"><span class="comment">//获取帮助</span></span><br><span class="line">git help &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --help</span><br><span class="line">man git-&lt;verb&gt;</span><br><span class="line"><span class="comment">//查看状态</span></span><br><span class="line"><span class="comment">//新添加的未跟踪文件前面有 ?? 标记</span></span><br><span class="line"><span class="comment">//新添加到暂存区中的文件前面有 A 标记</span></span><br><span class="line"><span class="comment">//修改过的文件前面有 M 标记</span></span><br><span class="line">git status</span><br><span class="line">git status -s 或 git status--short <span class="comment">//简要</span></span><br><span class="line">git status -v <span class="comment">//详细的修改内容，将你所做的改变的 diff 输出放到编辑器中从而使你知道本次提交具体做了哪些修改</span></span><br><span class="line"><span class="comment">//尚未暂存的文件修改了什么地方</span></span><br><span class="line"><span class="comment">//git diff 本身只显示尚未暂存的改动</span></span><br><span class="line">git diff <span class="comment">//比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容</span></span><br><span class="line">git diff --cached 或 git diff --staged<span class="comment">//查看已暂存的将要添加到下次提交里的内容。初次创建并add后执行该命令会显示全部内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>合作开发</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个名为 .git 的子目录</span></span><br><span class="line"><span class="comment">//这个子目录含有初始化的 Git 仓库中所有的必须文件</span></span><br><span class="line"><span class="comment">//但项目里的文件还没有被跟踪</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment">//加入跟踪</span></span><br><span class="line">git add</span><br><span class="line"><span class="comment">//unstage</span></span><br><span class="line">git reset</span><br><span class="line"><span class="comment">//提交</span></span><br><span class="line"><span class="comment">//一定要确认还有什么修改过的或新建的文件还没有 gitadd 过，否则提交的时候不会记录这些还没暂存起来的变化</span></span><br><span class="line">git commit</span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span> <span class="comment">//将提交信息与命令放在同一行</span></span><br><span class="line">git commit -a <span class="comment">//自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤</span></span><br><span class="line"><span class="comment">//克隆的是该 Git 仓库服务器上的几乎所有数据</span></span><br><span class="line"><span class="comment">//默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来</span></span><br><span class="line"><span class="comment">//初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝</span></span><br><span class="line">git clone [url]</span><br><span class="line"></span><br><span class="line"><span class="comment">//克隆远程仓库的时候，自定义本地仓库的名字</span></span><br><span class="line"><span class="comment">//支持多种数据传输协议。下面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用SSH 传输协议</span></span><br><span class="line">git clone <span class="attr">https</span>:<span class="comment">//github.com/libgit2/libgit2 mylibgit</span></span><br></pre></td></tr></table></figure>
<p>移除文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1>配置变量</h1>
<ul>
<li>git config 的工具来帮助设置控制 Git 外观和行为的配置变量</li>
<li>配置变量存储在三个不同的位置：</li>
</ul>
<table>
<thead>
<tr>
<th>配置变量</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/gitconfig 文件</td>
<td>1. 系统上每一个用户及他们仓库的通用配置<br>2. 使用带有 --system 选项的git config 时，它会从此文件读写配置变量</td>
</tr>
<tr>
<td>~/.gitconfig 或 ~/.config/git/config 文件</td>
<td>1.针对当前用户<br>传递 --global 选项让 Git读写此文件</td>
</tr>
<tr>
<td>.git/config</td>
<td>针对该仓库</td>
</tr>
</tbody>
</table>
<p>列表中每下一行都可以覆盖前几行的配置</p>
<h1>忽略文件</h1>
<ol>
<li>创建.gitignore文件</li>
<li>在里面写入信息。需满足以下条件：</li>
</ol>
<ul>
<li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</li>
<li>可使用标准的 glob 模式(简化的正则表达式)匹配。</li>
<li>匹配模式可以以（/）开头防止递归。如/TODO只忽略当前目录的TODO文件</li>
<li>匹配模式可以以（/）结尾指定目录。如build/忽略所有build目录下的文件</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li>
</ul>
<h1>Tips</h1>
<ol>
<li>每次准备提交前，先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 git commit。否则提交的时候不会记录这些还没暂存起来的变化，这些修改过的文件只保留在本地磁盘</li>
</ol>
<h1>顺序</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化或者克隆</span></span><br><span class="line">git init </span><br><span class="line">git clone</span><br><span class="line"></span><br><span class="line"><span class="comment">//跟踪</span></span><br><span class="line">git add</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交</span></span><br><span class="line">git status</span><br><span class="line">git commit</span><br><span class="line"><span class="comment">//推送</span></span><br><span class="line">git  push</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony画板</title>
    <url>/posts/5ee3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1></h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">settings</span>:<span class="title class_">RenderingContextSettings</span> = <span class="keyword">new</span> <span class="title class_">RenderingContextSettings</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="attr">canvas</span>:<span class="title class_">CanvasRenderingContext2D</span> = <span class="keyword">new</span> <span class="title class_">CanvasRenderingContext2D</span>(<span class="variable language_">this</span>.<span class="property">settings</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//起点默认左上角</span></span><br><span class="line"><span class="title class_">Canvas</span>(<span class="variable language_">this</span>.<span class="property">canvas</span>)</span><br><span class="line">    .<span class="title function_">width</span>(<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">    .<span class="title function_">height</span>(<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">    .<span class="title function_">onReady</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//自定义起点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">moveTo</span>(<span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">0</span>],<span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">1</span>])</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">lineTo</span>(<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">lineWidth</span> = <span class="number">10</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">strokeStyle</span> = <span class="string">&quot;#5bcbd1&quot;</span></span><br><span class="line">        <span class="comment">//边缘线</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">stroke</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">strokeStyle</span> = <span class="string">&quot;#a976b2&quot;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">strokeRect</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">fillRect</span>(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">Canvas</span>(<span class="variable language_">this</span>.<span class="property">canvas</span>)</span><br><span class="line">        .<span class="title function_">width</span>(<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">        .<span class="title function_">height</span>(<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">        .<span class="title function_">onReady</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">//边缘线</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">stroke</span>()</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">strokeStyle</span> = <span class="string">&quot;#a976b2&quot;</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">strokeRect</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">fillRect</span>(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">onTouch</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">switch</span>(event.<span class="property">type</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Down</span>:</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">0</span>] = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span></span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">1</span>] = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span></span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Up</span>:</span><br><span class="line">          <span class="comment">//   console.log(&quot;x: &quot;+event.touches[0].x)</span></span><br><span class="line">          <span class="comment">//   console.log(&quot;y: &quot;+event.touches[0].y)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Move</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">0</span>] = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">1</span>] = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span></span><br><span class="line">             <span class="variable language_">this</span>.<span class="title function_">draw</span>()</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Cancel</span>:</span><br><span class="line">          <span class="comment">//   console.log(&quot;x: &quot;+event.touches[0].x)</span></span><br><span class="line">          <span class="comment">//   console.log(&quot;y: &quot;+event.touches[0].y)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">moveTo</span>(<span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">0</span>],<span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">1</span>])</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">lineTo</span>(<span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">0</span>],<span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">1</span>])</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">strokeStyle</span> = <span class="string">&quot;#5bcbd1&quot;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">lineWidth</span> = <span class="number">10</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">stroke</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">1</span>] = <span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>贝塞尔曲线</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pos</span>&#123;</span><br><span class="line">  <span class="attr">x</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">y</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@State</span> <span class="attr">posLast</span>:<span class="built_in">number</span>[] = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="meta">@State</span> <span class="attr">posNow</span>:<span class="built_in">number</span>[] = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="meta">@State</span> <span class="attr">points</span>:<span class="title class_">Pos</span>[] = []</span><br><span class="line"><span class="attr">settings</span>:<span class="title class_">RenderingContextSettings</span> = <span class="keyword">new</span> <span class="title class_">RenderingContextSettings</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="attr">canvas</span>:<span class="title class_">CanvasRenderingContext2D</span> = <span class="keyword">new</span> <span class="title class_">CanvasRenderingContext2D</span>(<span class="variable language_">this</span>.<span class="property">settings</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Canvas</span>(<span class="variable language_">this</span>.<span class="property">canvas</span>)</span><br><span class="line">    .<span class="title function_">width</span>(<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">    .<span class="title function_">height</span>(<span class="string">&quot;100%&quot;</span>)</span><br><span class="line">    .<span class="title function_">onReady</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//边缘线</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">stroke</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">strokeStyle</span> = <span class="string">&quot;#a976b2&quot;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">strokeRect</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">fillRect</span>(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">onTouch</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(event.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Down</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">0</span>] = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">1</span>] = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">draw</span>(event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>,event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Up</span>:</span><br><span class="line">            <span class="comment">//复原</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">points</span> = []</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Move</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">0</span>] = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">1</span>] = event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Cancel</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="title function_">draw</span>(<span class="params"><span class="attr">x</span>:<span class="built_in">number</span>,<span class="attr">y</span>:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">points</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">         <span class="attr">x</span>:x,<span class="attr">y</span>:y</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>&lt;<span class="number">1</span>)<span class="keyword">return</span></span><br><span class="line">    <span class="comment">//四个点时绘制贝塞尔曲线</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>&gt;<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//this.points[this.points.length-1]是指points数组的最后一个点</span></span><br><span class="line">        <span class="comment">//以采到ABC三个点为例，此时计算BC中点B1，this.points[this.points.length-1]为C，-2为B</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">0</span>] = (<span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">1</span>].<span class="property">x</span>+<span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">2</span>].<span class="property">x</span>)/<span class="number">2</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">1</span>] = (<span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">1</span>].<span class="property">y</span>+<span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">2</span>].<span class="property">y</span>)/<span class="number">2</span></span><br><span class="line">        <span class="comment">//控制点计算</span></span><br><span class="line">        <span class="comment">//此时控制点即ABC中点B</span></span><br><span class="line">        <span class="keyword">let</span> controlX = <span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">2</span>].<span class="property">x</span></span><br><span class="line">        <span class="keyword">let</span> controlY = <span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">2</span>].<span class="property">y</span></span><br><span class="line">        <span class="comment">//以上已经获得待绘制的贝塞尔曲线所需参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里是计算下次绘制的起点以与绘制的贝塞尔曲线无缝衔接，以实现圆滑的效果</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">0</span>] = (<span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">2</span>].<span class="property">x</span>+<span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">3</span>].<span class="property">x</span>)/<span class="number">2</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">1</span>] = (<span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">2</span>].<span class="property">y</span>+<span class="variable language_">this</span>.<span class="property">points</span>[<span class="variable language_">this</span>.<span class="property">points</span>.<span class="property">length</span>-<span class="number">3</span>].<span class="property">y</span>)/<span class="number">2</span></span><br><span class="line">        <span class="comment">//移动回上一个点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">moveTo</span>(<span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">0</span>],<span class="variable language_">this</span>.<span class="property">posLast</span>[<span class="number">1</span>])</span><br><span class="line">        <span class="comment">//二阶贝塞尔曲线，一个控制点。越高阶控制点越多</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">quadraticCurveTo</span>(controlX,controlY,<span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">0</span>],<span class="variable language_">this</span>.<span class="property">posNow</span>[<span class="number">1</span>])</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">stroke</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">lineWidth</span> = <span class="number">5</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">strokeStyle</span> = <span class="string">&quot;#a976b2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony注意事项</title>
    <url>/posts/1b7f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol>
<li>起点默认左上角</li>
<li>await必须在有async修饰的函数内</li>
<li>行首左对齐，行尾右对齐</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Column</span>(&#123; <span class="attr">space</span>: <span class="number">10</span> &#125;) &#123;</span><br><span class="line">    <span class="title class_">Row</span>(&#123; <span class="attr">space</span>: <span class="number">20</span> &#125;) &#123;</span><br><span class="line">    <span class="title class_">Text</span>(<span class="variable language_">this</span>.<span class="property">leftContent</span>)</span><br><span class="line">        .<span class="title function_">fontSize</span>(<span class="number">15</span>)</span><br><span class="line">        .<span class="title function_">fontColor</span>($r(<span class="string">&#x27;app.color.text_secondary&#x27;</span>))</span><br><span class="line">    <span class="title class_">Row</span>() &#123;</span><br><span class="line">        <span class="title class_">Text</span>(<span class="variable language_">this</span>.<span class="property">rightContent</span>)</span><br><span class="line">        .<span class="title function_">fontSize</span>(<span class="number">15</span>)</span><br><span class="line">        <span class="title class_">Image</span>($r(<span class="string">&#x27;app.media.ic_phone&#x27;</span>)).<span class="title function_">visibility</span>(<span class="variable language_">this</span>.<span class="property">isShowIcon</span> ? <span class="title class_">Visibility</span>.<span class="property">Visible</span> : <span class="title class_">Visibility</span>.<span class="property">None</span>)</span><br><span class="line">        .<span class="title function_">width</span>(<span class="number">25</span>)</span><br><span class="line">        .<span class="title function_">aspectRatio</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">    .<span class="title function_">justifyContent</span>(<span class="title class_">FlexAlign</span>.<span class="property">SpaceBetween</span>)</span><br><span class="line">    .<span class="title function_">alignItems</span>(<span class="title class_">VerticalAlign</span>.<span class="property">Center</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony案例分析(2)——开眼App</title>
    <url>/posts/9b25/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>任务背景</h1>
<h2 id="任务描述">任务描述</h2>
<p>根据所给接口，仿照“开眼”APP开发UI界面，并实现页面路由、发帖、评论等APP基础功能</p>
<h2 id="训练目标">训练目标</h2>
<ol>
<li>对接口的使用</li>
<li>各种组件的综合运用</li>
<li>布局</li>
<li>性能优化</li>
</ol>
<h1>实现思路</h1>
<h2 id="布局">布局</h2>
<ol>
<li>对于首页，用Tabs开发下方导航栏</li>
<li></li>
</ol>
<h2 id="路由">路由</h2>
<p>使用router或者CustomDialog完成页面跳转</p>
<h2 id="接口数据获取">接口数据获取</h2>
<ol>
<li>根据接口格式，通过相关工具<img src="https://jsontool.cn/#:~:text=JsonTool.c" alt="JsonTool" title="JsonTool">、开眼App具体布局，分析接口数据应用方式</li>
<li>通过http包的Get方法请求数据</li>
<li></li>
</ol>
<h1>问题与解决方案</h1>
<table>
<thead>
<tr>
<th>问题</th>
<th>解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>接口数据庞大，难以下手</td>
<td>写一个DataAnalysis组件去分析Json里的重要数据，比如type<br>根据type分析该type下的数据用于何处</td>
</tr>
<tr>
<td>如何申请模拟器网络权限</td>
<td>src/main/resources/module.json5中的module添加&quot;requestPermissions&quot;: [{“name”: “ohos.permission.INTERNET”</td>
</tr>
</tbody>
</table>
<pre><code>&#125;],
</code></pre>
<h1>优化</h1>
<h2 id="待优化方向">待优化方向</h2>
<ol>
<li>使用Navigation组件开发首页</li>
<li>尽量不用Flex</li>
<li>使用LazyForEach</li>
<li>用泛型等面向对象思想减少组件冗余</li>
</ol>
<h2 id="具体优化思路">具体优化思路</h2>
<h1>参考答案分析</h1>
<h1>总结</h1>
<p>没啥难度，但有些收获。收获如下：</p>
<ol>
<li>router的使用</li>
<li>嵌套CustomDialog的使用</li>
<li>Video的使用</li>
<li>小技巧Swiper() .index(&amp;&amp;this.idx)</li>
</ol>
]]></content>
      <tags>
        <tag>鸿蒙案例</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony案例分析(3)——神领物流</title>
    <url>/posts/a318/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>任务背景</h1>
<h2 id="任务描述">任务描述</h2>
<p>两层结构：commons和Entry</p>
<h2 id="训练目标">训练目标</h2>
<h1>实现思路</h1>
<ol>
<li>应用icon配置</li>
</ol>
<ul>
<li>new一个Image Asset。并设置foreground为所用icon，这样可以生成各种分辨率的icon</li>
<li>Hap的module.json5-&gt;abilities-&gt;label(ctrl+b进去设置foreground)、startWindowIcon两个都改成自己的icon</li>
</ul>
<ol start="2">
<li>广告跳转与窗口管理</li>
</ol>
<ul>
<li>commons中设置数据类、api、常量</li>
<li>entry中设置entryAbility</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">onWindowStageCreate</span>(<span class="attr">windowStage</span>: <span class="variable language_">window</span>.<span class="property">WindowStage</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onWindowStageCreate&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> ad = <span class="keyword">await</span> <span class="title function_">getAdInfo</span>()</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">userInfo</span>:<span class="title class_">UserSettings</span> = <span class="keyword">new</span> <span class="title class_">UserSettings</span>(<span class="variable language_">this</span>.<span class="property">context</span>)</span><br><span class="line">    userInfo.<span class="title function_">setAd</span>(ad)</span><br><span class="line">    <span class="comment">//若有广告</span></span><br><span class="line">    <span class="keyword">if</span>(ad.<span class="property">showAd</span>)&#123;</span><br><span class="line">        <span class="comment">//创建窗口</span></span><br><span class="line">        <span class="keyword">let</span> subWin = <span class="keyword">await</span> windowStage.<span class="title function_">createSubWindow</span>(<span class="string">&#x27;subWin&#x27;</span>)</span><br><span class="line">        <span class="comment">//显示广告页的窗口</span></span><br><span class="line">        subWin.<span class="title function_">showWindow</span>()</span><br><span class="line">        subWin.<span class="title function_">setUIContent</span>(<span class="string">&#x27;pages/Start/AdPage&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">    <span class="comment">//上面的执行完后执行下面这句，从而跳转到login页</span></span><br><span class="line">    windowStage.<span class="title function_">loadContent</span>(<span class="string">&#x27;pages/login/LoginPage&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>广告页中操纵广告窗口生命周期</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">aboutToAppear</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">userInfo</span>:<span class="title class_">UserSettings</span> = <span class="keyword">new</span> <span class="title class_">UserSettings</span>(<span class="title function_">getContext</span>())</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ad</span> = userInfo.<span class="title function_">getAd</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timeCnt</span> = <span class="variable language_">this</span>.<span class="property">ad</span>.<span class="property">adTime</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">onPageShow</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">taskId</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      --<span class="variable language_">this</span>.<span class="property">timeCnt</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">timeCnt</span> &lt;= <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">findWindow</span>(<span class="string">&#x27;subWin&#x27;</span>).<span class="title function_">destroyWindow</span>()</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">taskId</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>问题与解决方案</h1>
<table>
<thead>
<tr>
<th>问题</th>
<th>解决方案</th>
</tr>
</thead>
</table>
<h1>优化</h1>
<h2 id="待优化方向">待优化方向</h2>
<h2 id="具体优化思路">具体优化思路</h2>
<h1>参考答案分析</h1>
<h1>总结</h1>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony开发工具(2)——Hvigor</title>
    <url>/posts/f04f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>概述</h1>
<ol>
<li>基于TS实现的构建任务编排工具</li>
<li>主要提供任务管理机制，基于任务对项目进行自动化构建的</li>
<li>自动执行和管理构建流程，实现应用/服务构建任务流的执行，完成HAP/APP的构建打包</li>
<li>可独立于DevEco Studio运行</li>
</ol>
<h1>工程结构</h1>
<ol>
<li>hvigor将工程解析为一个如下所示的两层树形结构，项目为根，模块为叶，都称为Node</li>
</ol>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A[Project] --&gt; B[Module_A]
    A--&gt;  C[Module_B]
    A --&gt; D[Module_C]
  </pre></div>
<ol start="2">
<li>
<p>最开始的初始化阶段，通过hvigorconfig.ts及工程级build-profile.json5文件(均可以配置多模块)中的配置构造出一个树形结构存储项目工程结构</p>
</li>
<li>
<p>配置文件说明</p>
</li>
</ol>
<ul>
<li>hvigor-config.json5文件，以指定hvigor的版本、构建依赖以及构建行为的配置参数</li>
<li>build-profile.json5文件分为工程级与模块级，其中buildOption在工程级文件和模块级文件均可配置(相同字段以模块级的字段为准，不同字段模块级会继承工程级)</li>
</ul>
<h2 id="注册生命周期中的插件、任务、hook">注册生命周期中的插件、任务、hook</h2>
<table>
<thead>
<tr>
<th>脚本</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>hvigorfile.ts</td>
<td>1. 每个node下都有一份，是构建必须文件<br>2. 可在其中注册插件、任务以及生命周期hook等操作</td>
</tr>
<tr>
<td>hvigorconfig.ts</td>
<td>1. 整个项目中仅根目录中存在一份<br>2. 不是构建必须的文件且默认不存在，可自行创建<br>3. 被解析执行的时间较早，可在hvigor生命周期刚开始时操作某些数据。</td>
</tr>
</tbody>
</table>
<h1>任务</h1>
<h2 id="特点">特点</h2>
<ul>
<li>是hvigor构建过程中的基本工作单元</li>
<li>定义了构建项目时需要执行的具体工作</li>
<li>每种任务执行逻辑由插件提供，插件可由hvigor-ohos-plugin默认提供，也可自己定制</li>
<li>任务间存在依赖关系，形成一个有向无环图</li>
</ul>
<h2 id="任务类型">任务类型</h2>
<table>
<thead>
<tr>
<th>任务类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ArkTS</td>
<td>ArkTS编译</td>
</tr>
<tr>
<td>JS</td>
<td>JS编译</td>
</tr>
<tr>
<td>Resource</td>
<td>资源处理</td>
</tr>
<tr>
<td>Package</td>
<td>打包</td>
</tr>
<tr>
<td>Sign</td>
<td>签名</td>
</tr>
<tr>
<td>Verification</td>
<td>验证项目/依赖项</td>
</tr>
<tr>
<td>Generate</td>
<td>生成、转换配置文件</td>
</tr>
<tr>
<td>Hook</td>
<td>hook</td>
</tr>
<tr>
<td>Config</td>
<td>处理配置文件相关</td>
</tr>
<tr>
<td>Native</td>
<td>Native编译任务</td>
</tr>
<tr>
<td>Help</td>
<td>查询帮助信息的任务</td>
</tr>
<tr>
<td>Other</td>
<td>未分类任务</td>
</tr>
</tbody>
</table>
<h2 id="构建插件hvigor-ohos-plugin">构建插件hvigor-ohos-plugin</h2>
<ul>
<li>hvigor控制任务的执行流程，但具体业务逻辑由hvigor-ohos-plugin提供</li>
<li>hvigor接受任务的注册并编排任务执行顺序，并按照顺序依次调用hvigor-ohos-plugin中的插件来执行任务</li>
<li>hvigor-ohos-plugin向hvigor注册任务-&gt;hvigor根据有向图依次调用对应的插件执行-&gt;完成编译、打包、签名等一系列任务-&gt;完成构建</li>
</ul>
<h2 id="Hvigor生命周期">Hvigor生命周期</h2>
<p>初始化-&gt;配置-&gt;执行</p>
<table>
<thead>
<tr>
<th>生命周期</th>
<th>任务</th>
<th>过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化</td>
<td>初始化项目的编译参数<br>构造出项目结构的树形数据模型(每个Node为HvigorNode对象)</td>
<td></td>
</tr>
</tbody>
</table>
<ol>
<li>根据命令参数和hvigor-config.json5文件设置hvigor的构建参数 <br></li>
<li>构造hvigor、hvigorConfig对象<br></li>
<li>由根目录build-profile.json5创建rootNodeDescriptor实例<br></li>
<li>通过其中的modules字段初始化工程中所有模块的NodeDescriptor对象实例<br></li>
<li>执行根目录hvigorconfig.ts，在其中通过hvigor相关API为生命周期注册hook或在构建开始时进行其他处理<br></li>
<li>根据节点描述对象构造各节点HvigorNode对象实例<br>
配置 | 此时node都已经加载完毕，还需加载插件、任务和DAG图 |</li>
<li>执行各node中的hvigorfile.ts文件，为node添加plugin（向hvigor注册任务）<br></li>
<li>执行plugin的apply方法，并添加plugin的上下文<br><br>
执行 | 执行选定的任务 | 依赖关系决定了任务执行顺序<br>任务可以并行执行</li>
</ol>
<h3 id="Hook">Hook</h3>
<p><img src="/source/Harmony/HvigorHook.png" alt=""></p>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony案例分析(1)——美团购物</title>
    <url>/posts/98cf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>任务背景</h1>
<h2 id="任务描述">任务描述</h2>
<p>根据接口数据和美团APP，仿照美团购物界面进行开发，构建商品与购物车之间的逻辑关系</p>
<h2 id="训练目标">训练目标</h2>
<ol>
<li>理解UI刷新原理</li>
<li>掌握组件间传值方法，如@Prop、@Link、@Provide与@Consume</li>
<li>掌握持久化方法</li>
</ol>
<h1>实现思路</h1>
<h2 id="布局">布局</h2>
<p>用Coloumn、Row进行布局，通过onClick和if-else触发或切换组件</p>
<h2 id="传值">传值</h2>
<ol>
<li>将商品写成对象数组通过@Link传递</li>
<li>商品数量令用一个number数组存储到AppStorage上</li>
</ol>
<h1>问题与解决方案</h1>
<table>
<thead>
<tr>
<th>问题</th>
<th>解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>加入商品数组的会有重复</td>
<td>写一个面对对象数组的去重函数</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1>优化</h1>
<h2 id="待优化方向">待优化方向</h2>
<ol>
<li>对商品数组和商品数量数组做持久化</li>
</ol>
<h2 id="具体优化思路">具体优化思路</h2>
<h1>参考答案分析</h1>
<h1>总结</h1>
<p>有点麻烦，但没啥难度。收获不少，如下：</p>
<ol>
<li>对象数组的去重</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">dedupe</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">newCart</span>:<span class="title class_">Foods</span>[] = []</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shoppingCartArr</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params"><span class="attr">item</span>:<span class="title class_">Foods</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> newCart.<span class="title function_">includes</span>(item)?<span class="string">&#x27;&#x27;</span>:newCart.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shoppingCartArr</span> = newCart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>传值<br>
@Link</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>@ObjectLink与@Observed</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>@AppStorage</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙案例</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony开发工具(1)——DevEco</title>
    <url>/posts/308c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>目录结构</h1>
<h1>生成文档</h1>
<p>ToolS -&gt; Generate ArkTsDoc</p>
<h1>查看构建历史</h1>
<p>Build -&gt; Build Analysis</p>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony安全区设置</title>
    <url>/posts/8f12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>设置安全区</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">aboutToAppear</span>():<span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">getLastWindow</span>(<span class="title function_">getContext</span>(<span class="variable language_">this</span>))</span><br><span class="line">    win.<span class="title function_">setWindowLayoutFullScreen</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="comment">//底部若指定高度(如.height(100))会失效</span></span><br><span class="line"><span class="title class_">Image</span>(<span class="string">&#x27;https://pic3.zhimg.com/v2-37617ef484856928d1db445d493a62f7_r.jpg?source=1940ef5c&#x27;</span>)</span><br><span class="line">        .<span class="title function_">height</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">        .<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">        .<span class="title function_">expandSafeArea</span>([<span class="title class_">SafeAreaType</span>.<span class="property">SYSTEM</span>],[<span class="title class_">SafeAreaEdge</span>.<span class="property">TOP</span>,<span class="title class_">SafeAreaEdge</span>.<span class="property">BOTTOM</span>])</span><br></pre></td></tr></table></figure>
<h1>获取安全区高度、宽度</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">aboutToAppear</span>():<span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;&#123;</span><br><span class="line">   <span class="keyword">const</span> win = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">getLastWindow</span>(<span class="title function_">getContext</span>(<span class="variable language_">this</span>))</span><br><span class="line">   win.<span class="title function_">setWindowLayoutFullScreen</span>(<span class="literal">true</span>)</span><br><span class="line">   <span class="comment">//顶部高度window.AvoidAreaType.TYPE_SYSTEM</span></span><br><span class="line">   <span class="comment">//底部window.AvoidAreaType.TYPE_NAVIGATION_INDICATOR</span></span><br><span class="line">   <span class="comment">//需要用px2vp转换px</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">topHeight</span> = <span class="title function_">px2vp</span>(win.<span class="title function_">getWindowAvoidArea</span>(<span class="variable language_">window</span>.<span class="property">AvoidAreaType</span>.<span class="property">TYPE_SYSTEM</span>).<span class="property">topRect</span>.<span class="property">height</span>)</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">bottomHeight</span> = <span class="title function_">px2vp</span>(win.<span class="title function_">getWindowAvoidArea</span>(<span class="variable language_">window</span>.<span class="property">AvoidAreaType</span>.<span class="property">TYPE_NAVIGATION_INDICATOR</span>).<span class="property">bottomRect</span>.<span class="property">height</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//使用</span></span><br><span class="line"> <span class="title class_">Column</span>()&#123;</span><br><span class="line">   <span class="title class_">Image</span>(<span class="string">&#x27;https://pic3.zhimg.com/v2-37617ef484856928d1db445d493a62f7_r.jpg?source=1940ef5c&#x27;</span>)</span><br><span class="line">           .<span class="title function_">height</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">           .<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">           .<span class="title function_">expandSafeArea</span>([<span class="title class_">SafeAreaType</span>.<span class="property">SYSTEM</span>],[<span class="title class_">SafeAreaEdge</span>.<span class="property">TOP</span>,<span class="title class_">SafeAreaEdge</span>.<span class="property">BOTTOM</span>])</span><br><span class="line">       &#125;</span><br><span class="line">   .<span class="title function_">padding</span>(&#123;<span class="attr">top</span>:<span class="variable language_">this</span>.<span class="property">topHeight</span>,<span class="attr">bottom</span>:<span class="variable language_">this</span>.<span class="property">bottomHeight</span>&#125;)</span><br><span class="line">   .<span class="title function_">width</span>(<span class="string">&quot;100%&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1>问题</h1>
<h2 id="软键盘避让">软键盘避让</h2>
<p>弹出键盘时会把屏幕顶出去</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/main/ets/entryability/EntryAbility.ets</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">onWindowStageCreate</span>(<span class="attr">windowStage</span>: <span class="variable language_">window</span>.<span class="property">WindowStage</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line"><span class="comment">// Main window is created, set main page for this ability</span></span><br><span class="line">hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onWindowStageCreate&#x27;</span>);</span><br><span class="line"><span class="comment">// const win = await window.getLastWindow(getContext(this))</span></span><br><span class="line"><span class="comment">// win.setWindowLayoutFullScreen(true)</span></span><br><span class="line"><span class="comment">//注意路径windowStage.loadContent(&#x27;pages/Index&#x27;,</span></span><br><span class="line">windowStage.<span class="title function_">loadContent</span>(<span class="string">&#x27;pages/Index&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//KeyboardAvoidMode是@kit.ArkUI的</span></span><br><span class="line">    windowStage.<span class="title function_">getMainWindowSync</span>().<span class="title function_">getUIContext</span>().<span class="title function_">setKeyboardAvoidMode</span>(<span class="title class_">KeyboardAvoidMode</span>.<span class="property">RESIZE</span>)</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">code</span>) &#123;</span><br><span class="line">    hilog.<span class="title function_">error</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;Failed to load the content. Cause: %&#123;public&#125;s&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(err) ?? <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;Succeeded in loading the content.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pages/Index.ets</span></span><br><span class="line"><span class="title class_">Column</span>() &#123;</span><br><span class="line">    <span class="title class_">TextInput</span>(&#123;<span class="attr">placeholder</span>:<span class="variable language_">this</span>.<span class="property">message</span>&#125;)</span><br><span class="line">    .<span class="title function_">layoutWeight</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">backgroundColor</span>(<span class="title class_">Color</span>.<span class="property">Pink</span>)</span><br><span class="line">    <span class="title class_">Image</span>(<span class="string">&#x27;https://pic3.zhimg.com/v2-37617ef484856928d1db445d493a62f7_r.jpg?source=1940ef5c&#x27;</span>)</span><br><span class="line">    .<span class="title function_">height</span>(<span class="string">&#x27;80%&#x27;</span>)</span><br><span class="line">    .<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expandSafeArea</span>([<span class="title class_">SafeAreaType</span>.<span class="property">SYSTEM</span>],[<span class="title class_">SafeAreaEdge</span>.<span class="property">TOP</span>,<span class="title class_">SafeAreaEdge</span>.<span class="property">BOTTOM</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .padding(&#123;top:this.topHeight,bottom:this.bottomHeight&#125;)</span></span><br><span class="line">.<span class="title function_">width</span>(<span class="string">&quot;100%&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony主题设置</title>
    <url>/posts/afe0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>主题色</h1>
<ol>
<li>创建自定义主题色</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EntryAbility.ets</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myTheme</span> <span class="keyword">implements</span> <span class="title class_">CustomTheme</span>&#123;</span><br><span class="line">  colors?: <span class="title class_">CustomColors</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">color</span>: <span class="title class_">CustomColors</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colors</span> = color</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">onWindowStageCreate</span>(<span class="attr">windowStage</span>: <span class="variable language_">window</span>.<span class="property">WindowStage</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// Main window is created, set main page for this ability</span></span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onWindowStageCreate&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> theme = <span class="keyword">new</span> <span class="title function_">myTheme</span>()</span><br><span class="line">    <span class="title class_">ThemeControl</span>.<span class="title function_">setDefaultTheme</span>(theme)</span><br><span class="line">    <span class="comment">//····</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>调用</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Index.ets</span></span><br><span class="line"><span class="title function_">onWillApplyTheme</span>(<span class="attr">theme</span>: <span class="title class_">Theme</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fontColor</span> = theme.<span class="property">colors</span>.<span class="property">fontPrimary</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    .<span class="title function_">fontColor</span>(<span class="variable language_">this</span>.<span class="property">fontColor</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony线程(3)——Taskpool</title>
    <url>/posts/636d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>概述</h1>
<p>为应用程序提供一个多线程的运行环境，降低整体资源的消耗、提高系统的整体性能</p>
<h1>实现流程</h1>
<ol>
<li>开发者在主线程封装任务抛给任务队列(创建TaskGroup并通过addTask()添加对应的任务)</li>
<li>系统选择合适的工作线程，进行任务的分发及执行(通过execute()执行任务组，并指定优先级)</li>
<li>工作线程将结果返回给主线程</li>
</ol>
<h2 id="实现任务">实现任务</h2>
<ol>
<li>实现任务的函数需要使用装饰器@Concurrent标注，且仅支持在.ets文件中使用。</li>
<li>从API version 11开始，实现任务的函数需要使用<strong>类方法</strong>时，该类必须使用装饰器@Sendable装饰器标注，且仅支持在.ets文件中使用。</li>
<li>任务函数在TaskPool工作线程的执行耗时不能超过3分钟（不包含Promise和async/await异步调用的耗时，例如网络下载、文件读写等I/O任务的耗时），否则会被强制退出。</li>
<li>实现任务的函数入参需满足序列化支持的类型</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">mport &#123; taskpool &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Concurrent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">imageProcessing</span>(<span class="params"><span class="attr">dataSlice</span>: <span class="title class_">ArrayBuffer</span></span>): <span class="title class_">ArrayBuffer</span> &#123;</span><br><span class="line">  <span class="comment">// 步骤1: 具体的图像处理操作及其他耗时操作</span></span><br><span class="line">  <span class="keyword">return</span> dataSlice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">histogramStatistic</span>(<span class="params"><span class="attr">pixelBuffer</span>: <span class="title class_">ArrayBuffer</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="comment">// 步骤2: 分成三段</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">number</span>: <span class="built_in">number</span> = pixelBuffer.<span class="property">byteLength</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">buffer1</span>: <span class="title class_">ArrayBuffer</span> = pixelBuffer.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="built_in">number</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">buffer2</span>: <span class="title class_">ArrayBuffer</span> = pixelBuffer.<span class="title function_">slice</span>(<span class="built_in">number</span>, <span class="built_in">number</span> * <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">buffer3</span>: <span class="title class_">ArrayBuffer</span> = pixelBuffer.<span class="title function_">slice</span>(<span class="built_in">number</span> * <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 步骤3: 添加对应的任务，并发调度</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">group</span>: taskpool.<span class="property">TaskGroup</span> = <span class="keyword">new</span> taskpool.<span class="title class_">TaskGroup</span>();</span><br><span class="line">  group.<span class="title function_">addTask</span>(imageProcessing, buffer1);</span><br><span class="line">  group.<span class="title function_">addTask</span>(imageProcessing, buffer2);</span><br><span class="line">  group.<span class="title function_">addTask</span>(imageProcessing, buffer3);</span><br><span class="line"></span><br><span class="line">  taskpool.<span class="title function_">execute</span>(group, taskpool.<span class="property">Priority</span>.<span class="property">HIGH</span>).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="attr">ret</span>: <span class="title class_">Object</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 步骤4: 指定优先级并执行，结果数组汇总处理</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同步任务示例</p>
<ol>
<li>定义并发函数，内部调用同步方法。</li>
<li>创建任务Task，通过execute()接口执行该任务，并对任务返回的结果进行操作。</li>
<li>执行并发操作。</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handle.ets 代码</span></span><br><span class="line"><span class="string">&quot;use shared&quot;</span></span><br><span class="line"><span class="comment">// 单例</span></span><br><span class="line"><span class="comment">// 实现任务的函数需要使用**类方法**时，该类必须使用装饰器@Sendable装饰器标注</span></span><br><span class="line"><span class="meta">@Sendable</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Handle</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">Handle</span> = <span class="keyword">new</span> <span class="title class_">Handle</span>();</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(): <span class="title class_">Handle</span> &#123;</span><br><span class="line">    <span class="comment">// 返回单例对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Handle</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">syncGet</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 同步Get方法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">syncSet</span>(<span class="attr">num</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟同步步骤1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;taskpool: this is 1st print!&quot;</span>);</span><br><span class="line">    <span class="comment">// 模拟同步步骤2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;taskpool: this is 2nd print!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ++num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">syncSet2</span>(<span class="attr">num</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟同步步骤1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;taskpool: this is syncSet2 1st print!&quot;</span>);</span><br><span class="line">    <span class="comment">// 模拟同步步骤2</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;taskpool: this is syncSet2 2nd print!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ++num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Index.ets代码</span></span><br><span class="line"><span class="keyword">import</span> &#123; taskpool&#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Handle</span> <span class="keyword">from</span> <span class="string">&#x27;./Handle&#x27;</span>; <span class="comment">// 返回静态句柄</span></span><br><span class="line"><span class="comment">// 步骤1: 定义并发函数，内部调用同步方法</span></span><br><span class="line"><span class="meta">@Concurrent</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"><span class="attr">num</span>: <span class="built_in">number</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 调用静态类对象中实现的同步等待调用</span></span><br><span class="line">  <span class="comment">// 先调用syncSet方法并将其结果作为syncSet2的参数，模拟同步调用逻辑</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">tmpNum</span>: <span class="built_in">number</span> = <span class="title class_">Handle</span>.<span class="title function_">syncSet</span>(num);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;this is Child_Thread&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Handle</span>.<span class="title function_">syncSet2</span>(tmpNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 步骤2: 创建任务并执行</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncGet</span>(<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 创建task、task2并传入函数func</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">task</span>: taskpool.<span class="property">Task</span> = <span class="keyword">new</span> taskpool.<span class="title class_">Task</span>(func, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">task2</span>: taskpool.<span class="property">Task</span> = <span class="keyword">new</span> taskpool.<span class="title class_">Task</span>(func, <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 执行task、task2任务，await保证其同步执行</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res</span>: <span class="built_in">number</span> = <span class="keyword">await</span> taskpool.<span class="title function_">execute</span>(task) <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">res2</span>: <span class="built_in">number</span> = <span class="keyword">await</span> taskpool.<span class="title function_">execute</span>(task2) <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// 打印任务结果</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;taskpool: task res is: &quot;</span> + res);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;taskpool: task res2 is: &quot;</span> + res2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Index</span> &#123;</span><br><span class="line">  <span class="meta">@State</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Row</span>() &#123;</span><br><span class="line">      <span class="title class_">Column</span>() &#123;</span><br><span class="line">        <span class="title class_">Text</span>(<span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">          .<span class="title function_">fontSize</span>(<span class="number">50</span>)</span><br><span class="line">          .<span class="title function_">fontWeight</span>(<span class="title class_">FontWeight</span>.<span class="property">Bold</span>)</span><br><span class="line">          .<span class="title function_">onClick</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">            <span class="comment">// 步骤3: 执行并发操作</span></span><br><span class="line">            <span class="title function_">asyncGet</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="title class_">Handle</span>.<span class="title function_">syncSet</span>(<span class="number">100</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;this is Main_Thread!&quot;</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">      .<span class="title function_">height</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>系统对taskpool的管理</h1>
<ol>
<li>任务较多时会扩容</li>
<li>长时间没有任务分发时会缩容，减少工作线程数量</li>
</ol>
<h1>生命周期</h1>
<p>TaskPool自行管理线程数量，其生命周期由TaskPool统一管理(无需开发者关心)</p>
<h1>注意事项</h1>
<ol>
<li>Promise不支持跨线程传递，不能作为concurrent function的返回值</li>
<li>不支持在TaskPool工作线程中使用AppStorage</li>
<li>序列化传输的数据量大小限制为16MB</li>
<li>不同线程中上下文对象不同，因此TaskPool工作线程只能使用线程安全的库</li>
<li></li>
</ol>
<h1>与Worker的异同</h1>
<p>taskpool偏向于独立任务，worker偏向于线程</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>taskpool</th>
<th>worker</th>
</tr>
</thead>
<tbody>
<tr>
<td>参数传递机制</td>
<td>标准的结构化克隆算法进行序列化、反序列化，完成参数传递<br>支持ArrayBuffer转移和SharedArrayBuffer共享</td>
<td>同</td>
</tr>
<tr>
<td>参数传递</td>
<td>直接传递，无需封装，默认进行transfer</td>
<td>消息对象唯一参数，需要自己封装</td>
</tr>
<tr>
<td>方法调用</td>
<td>直接将方法传入</td>
<td>Worker线程中进行消息解析并调用对应方法</td>
</tr>
<tr>
<td>返回值</td>
<td>异步调用后默认返回</td>
<td>主动发送消息，需在onmessage解析赋值</td>
</tr>
<tr>
<td>任务池个数上限</td>
<td>自动管理，无需配置</td>
<td>同个进程下，最多支持同时开启64个Worker</td>
</tr>
<tr>
<td>任务执行时长上限</td>
<td>3分钟（不包含Promise和async/await异步调用的耗时），长时任务无执行时长上限</td>
<td>无限制</td>
</tr>
<tr>
<td>设置任务的优先级</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>负载均衡</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>执行任务的取消</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>线程复用</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>任务延时执行</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>设置任务依赖关系</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>串行队列</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>任务组</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<h1>使用场景</h1>
<ol>
<li>需要设置优先级的任务</li>
<li>需要频繁取消的任务</li>
<li>大量或者调度点较分散的任务</li>
<li>IO密集型、三分钟内独立任务的CPU密集型</li>
<li>同步任务之间相对独立(静态方法，或者单例实现的方法)</li>
</ol>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony混合开发——Web</title>
    <url>/posts/9005/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Web页面的显示过程可以被分为多个阶段，包括DNS解析、建立连接、发送请求、接收响应、解析HTML、下载资源等步骤</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; webview &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkWeb&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Hybrid</span> &#123;</span><br><span class="line">  <span class="meta">@State</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">  <span class="attr">webController</span>:webview.<span class="property">WebviewController</span> = <span class="keyword">new</span> webview.<span class="title class_">WebviewController</span>()</span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Column</span>()&#123;</span><br><span class="line">      <span class="title class_">Button</span>(<span class="string">&#x27;modify&#x27;</span>)</span><br><span class="line">        .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">// this.webController.runJavaScript(`myFunction()`)</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">webController</span>.<span class="title function_">registerJavaScriptProxy</span>(<span class="keyword">new</span> <span class="title class_">Inject</span>(),<span class="string">&quot;test&quot;</span>,[<span class="string">&quot;getLocation&quot;</span>])</span><br><span class="line">          <span class="comment">//前面注入后需要刷新一下</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">webController</span>.<span class="title function_">refresh</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="title class_">Web</span>(&#123;<span class="attr">src</span>:$rawfile(<span class="string">&quot;web.html&quot;</span>),<span class="attr">controller</span>:<span class="variable language_">this</span>.<span class="property">webController</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_">height</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">    .<span class="title function_">width</span>(<span class="string">&#x27;100%&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工具类函数注入</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inject</span>&#123;</span><br><span class="line">  <span class="title function_">getLocation</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;Hello&quot;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web.html(注意静态资源只能放在rawfile下)</span></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getLocation()&quot;</span>&gt;</span>获取位置信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">getLocation</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    test.<span class="title function_">getLocation</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony线程(1)——概述</title>
    <url>/posts/1586/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>类型</h1>
<table>
<thead>
<tr>
<th>类型</th>
<th>任务</th>
</tr>
</thead>
<tbody>
<tr>
<td>主线程</td>
<td>执行UI绘制<br>管理主线程的ArkTS引擎实例，使多个UIAbility组件能够运行在其之上<br>管理其他线程的ArkTS引擎实例<br>分发交互事件<br>处理应用代码的回调，包括事件处理和生命周期管理<br>接收TaskPool以及Worker线程发送的消息。</td>
</tr>
<tr>
<td>TaskPool Worker</td>
<td>执行耗时操作，支持设置调度优先级、负载均衡等功能，推荐使用</td>
</tr>
<tr>
<td>Worker</td>
<td>执行耗时操作，支持线程间通信</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony线程(2)——Worker</title>
    <url>/posts/fb2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>相关概念</h1>
<table>
<thead>
<tr>
<th>概念</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>宿主进程</td>
<td>创建Worker的线程称为宿主线程（不一定是主线程，工作线程也支持创建Worker子线程）</td>
</tr>
<tr>
<td>Worker子线程（或Actor线程、工作线程）</td>
<td>Worker自身的线程</td>
</tr>
<tr>
<td>序列化机制</td>
<td>Worker通过序列化机制与宿主线程之间相互通信，完成命令及数据交互</td>
</tr>
</tbody>
</table>
<ol>
<li>每个Worker子线程与宿主线程拥有独立的实例，包含基础设施、对象、代码段等，因此每个Worker启动存在一定的内存开销，需要限制Worker的子线程数量</li>
</ol>
<h1>创建</h1>
<ol>
<li>手动</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//build-profile.json5</span></span><br><span class="line"><span class="string">&quot;buildOption&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;sourceOption&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;workers&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;./src/main/ets/workers/worker.ets&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自动<br>
{moduleName}目录下任意位置，点击鼠标右键 &gt; New &gt; Worker</li>
</ol>
<h1>使用</h1>
<ol>
<li>导入模块</li>
<li>宿主线程指定worker，通过postMessage发送信息</li>
<li>worker中执行业务逻辑</li>
<li>worker子线程通过onMessage和postMessage向宿主线程报告执行结果</li>
<li>宿主线程通过onerror和onmeesage接受结果</li>
<li>销毁：宿主onexit后，宿主terminate 或 worker close</li>
</ol>
<p>导入</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; worker &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// API 9及之后版本使用：</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">worker1</span>: worker.<span class="property">ThreadWorker</span> = <span class="keyword">new</span> worker.<span class="title class_">ThreadWorker</span>(<span class="string">&#x27;entry/ets/workers/MyWorker.ets&#x27;</span>);</span><br><span class="line"><span class="comment">// API 8及之前版本使用：</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">worker2</span>: worker.<span class="property">Worker</span> = <span class="keyword">new</span> worker.<span class="title class_">Worker</span>(<span class="string">&#x27;entry/ets/workers/MyWorker.ets&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>加载</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1） 加载Ability中Worker线程文件场景</span></span><br><span class="line"><span class="keyword">import</span> &#123; worker &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"><span class="comment">// worker线程文件所在路径：&quot;entry/src/main/ets/workers/worker.ets&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">workerStage1</span>: worker.<span class="property">ThreadWorker</span> = <span class="keyword">new</span> worker.<span class="title class_">ThreadWorker</span>(<span class="string">&#x27;entry/ets/workers/worker.ets&#x27;</span>);</span><br><span class="line"><span class="comment">// worker线程文件所在路径：&quot;phone/src/main/ets/ThreadFile/workers/worker.ets&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">workerStage2</span>: worker.<span class="property">ThreadWorker</span> = <span class="keyword">new</span> worker.<span class="title class_">ThreadWorker</span>(<span class="string">&#x27;phone/ets/ThreadFile/workers/worker.ets&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2） 加载HSP中Worker线程文件场景</span></span><br><span class="line"><span class="keyword">import</span> &#123; worker &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"><span class="comment">// worker线程文件所在路径： &quot;hsp/src/main/ets/workers/worker.ets&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">workerStage3</span>: worker.<span class="property">ThreadWorker</span> = <span class="keyword">new</span> worker.<span class="title class_">ThreadWorker</span>(<span class="string">&#x27;hsp/ets/workers/worker.ets&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3） 加载HAR中Worker线程文件场景</span></span><br><span class="line"><span class="keyword">import</span> &#123; worker &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"><span class="comment">// @标识路径加载形式：</span></span><br><span class="line"><span class="comment">// worker线程文件所在路径: &quot;har/src/main/ets/workers/worker.ets&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">workerStage4</span>: worker.<span class="property">ThreadWorker</span> = <span class="keyword">new</span> worker.<span class="title class_">ThreadWorker</span>(<span class="string">&#x27;@har/ets/workers/worker.ets&#x27;</span>);</span><br><span class="line"><span class="comment">// 相对路径加载形式：</span></span><br><span class="line"><span class="comment">// worker线程文件所在路径: &quot;har/src/main/ets/workers/worker.ets&quot;</span></span><br><span class="line"><span class="comment">// 创建Worker对象的文件所在路径：&quot;har/src/main/ets/components/mainpage/MainPage.ets&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">workerStage5</span>: worker.<span class="property">ThreadWorker</span> = <span class="keyword">new</span> worker.<span class="title class_">ThreadWorker</span>(<span class="string">&#x27;../../workers/worker.ets&#x27;</span>);  </span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&lt;!---<span class="title class_">Index</span>.<span class="property">ts</span> ---!&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; worker &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"><span class="comment">// 指定worker</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">workerInstance</span>: worker.<span class="property">ThreadWorker</span> = <span class="keyword">new</span> worker.<span class="title class_">ThreadWorker</span>(<span class="string">&#x27;entry/ets/workers/MyWorker.ts&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> done = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 接收Worker子线程的结果</span></span><br><span class="line">workerInstance.<span class="property">onmessage</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;MyWorker.ts onmessage&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">    workerInstance.<span class="title function_">postMessage</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;value&#x27;</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    done = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">workerInstance.<span class="property">onerror</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 接收Worker子线程的错误信息</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 向Worker子线程发送训练消息</span></span><br><span class="line">workerInstance.<span class="title function_">postMessage</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="comment">// Worker线程销毁后，执行onexit回调方法</span></span><br><span class="line">workerInstance.<span class="property">onexit</span> = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;main thread terminate&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法一：宿主销毁Worker线程</span></span><br><span class="line">workerInstance.<span class="title function_">terminate</span>();</span><br><span class="line"></span><br><span class="line">&lt;!---<span class="title class_">MyWorker</span>.<span class="property">ts</span> ---!&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; worker, <span class="title class_">ThreadWorkerGlobalScope</span>, <span class="title class_">MessageEvents</span>, <span class="title class_">ErrorEvent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkTS&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">workerPort</span>: <span class="title class_">ThreadWorkerGlobalScope</span> = worker.<span class="property">workerPort</span>;</span><br><span class="line"><span class="comment">// MyWorker.ts</span></span><br><span class="line"><span class="comment">// 省略业务逻辑</span></span><br><span class="line"><span class="comment">// Worker线程的onmessage逻辑</span></span><br><span class="line">workerPort.<span class="property">onmessage</span> = (<span class="attr">e</span>: <span class="title class_">MessageEvents</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 根据传输的数据的type选择进行操作</span></span><br><span class="line"> <span class="keyword">switch</span> (e.<span class="property">data</span>.<span class="property">type</span> <span class="keyword">as</span> <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  <span class="comment">// 进行训练</span></span><br><span class="line">   <span class="title function_">optimize</span>();</span><br><span class="line">  <span class="comment">// 训练之后发送主线程训练成功的消息</span></span><br><span class="line">   workerPort.<span class="title function_">postMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;message&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;train success.&#x27;</span> &#125;);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="comment">// 执行预测</span></span><br><span class="line">   <span class="keyword">const</span> <span class="attr">output</span>: <span class="built_in">number</span> = <span class="title function_">predict</span>(e.<span class="property">data</span>.<span class="property">value</span> <span class="keyword">as</span> <span class="built_in">number</span>);</span><br><span class="line">  <span class="comment">// 发送主线程预测的结果</span></span><br><span class="line">   workerPort.<span class="title function_">postMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;predict&#x27;</span>, <span class="attr">value</span>: output &#125;);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">   workerPort.<span class="title function_">postMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;message&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;send message is invalid&#x27;</span> &#125;);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// 方法2：worker销毁自己</span></span><br><span class="line">workerPort.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure>
<p>同步任务(多个线程之间协调执行的任务，其目的是确保多个任务按照一定的顺序和规则执行)示例</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1>生命周期</h1>
<ul>
<li>由开发者自行维护</li>
<li>调用terminate()接口或close()方法主动销毁Worker</li>
</ul>
<h1>注意事项</h1>
<ul>
<li>Worker空闲时也会一直运行</li>
<li>设定的内存阈值为1.5GB和设备物理内存的60%中的较小者</li>
<li>系统最多可以同时运行64个Worker</li>
</ul>
<h1>使用场景</h1>
<ol>
<li>运行时间超过3分钟的CPU密集型</li>
<li>有关联的一系列同步任务(无法单例创建的类对象实现的方法)</li>
</ol>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony常用组件(1)——布局</title>
    <url>/posts/70e0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>布局</h1>
<h2 id="思路">思路</h2>
<ol>
<li>将每个组件看作盒子</li>
<li>可以通过DevEco Previewer的TT查看，也可以自己设置.borderWidth查看盒子</li>
</ol>
<h2 id="主轴与交叉轴概述">主轴与交叉轴概述</h2>
<p>两个轴相互垂直，不同容器中主轴方向不一样。如Column主轴为竖、交叉轴为横，而Row则相反。</p>
<ul>
<li>设置主轴：.justyfyContent(FlexAlign.)</li>
<li>设置交叉轴：.alignItems(HorizontalAlign/VerticalAlign.)</li>
</ul>
<h2 id="Column">Column</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Row">Row</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Row</span>(&#123;<span class="attr">space</span>:&#125;)</span><br><span class="line">    .<span class="title function_">width</span>()</span><br><span class="line">    .<span class="title function_">height</span>()</span><br><span class="line">    .<span class="title function_">alignItems</span>(<span class="title class_">VerticalAlign</span>)</span><br><span class="line">    .<span class="title function_">justifyContent</span>(<span class="title class_">FlexAlign</span> or <span class="title class_">FlexDirection</span> or <span class="title class_">FlexWarp</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Stack">Stack</h2>
<p>前面写的组件在下，后面写的在上</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Stack</span>(&#123;<span class="attr">alignContent</span>:<span class="title class_">Alignment</span>.<span class="property">Center</span>&#125;)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RelativeContainer">RelativeContainer</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">RelativeContainer</span>() &#123;&#125;</span><br><span class="line">    .<span class="title function_">alignRules</span>(&#123;</span><br><span class="line">        <span class="attr">middle</span>: &#123;</span><br><span class="line">            <span class="attr">anchor</span>: <span class="string">&quot;__container__&quot;</span>,</span><br><span class="line">            <span class="attr">align</span>: <span class="title class_">HorizontalAlign</span>.<span class="property">Center</span></span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="attr">center</span>: &#123;</span><br><span class="line">            <span class="attr">anchor</span>: <span class="string">&quot;__container__&quot;</span>,</span><br><span class="line">            <span class="attr">align</span>: <span class="title class_">VerticalAlign</span>.<span class="property">Center</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="property">layoutWeight</span></span><br><span class="line">    .<span class="title function_">id</span>(<span class="string">&#x27;xxxx&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Grid">Grid</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Grid</span>() &#123;</span><br><span class="line">  <span class="title class_">GridItem</span>() &#123;</span><br><span class="line">  <span class="title class_">Text</span>(key)</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//列从哪里开始到哪里结束</span></span><br><span class="line">    .<span class="title function_">columnStart</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">columnEnd</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">//行从哪里开始到哪里结束</span></span><br><span class="line">    .<span class="title function_">rowStart</span>(<span class="number">5</span>)</span><br><span class="line">    .<span class="title function_">rowEnd</span>(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fr的个数即为网格布局的行或列数。数字表示该行或列在网格布局宽度上的占比，最终决定该行或列的宽度。</span></span><br><span class="line">.<span class="title function_">rowsTemplate</span>(<span class="string">&#x27;1fr 1fr 1fr&#x27;</span>)</span><br><span class="line">.<span class="title function_">columnsTemplate</span>(<span class="string">&#x27;1fr 2fr 1fr&#x27;</span>)</span><br><span class="line"><span class="comment">//主轴方向，以及主轴最多有几个</span></span><br><span class="line">.<span class="title function_">maxCount</span>(<span class="number">3</span>)</span><br><span class="line">.<span class="title function_">layoutDirection</span>(<span class="title class_">GridDirection</span>.<span class="property">Row</span>)</span><br><span class="line"><span class="comment">//间隔</span></span><br><span class="line">.<span class="title function_">columnsGap</span>(<span class="number">10</span>)</span><br><span class="line">.<span class="title function_">rowsGap</span>(<span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Flex">Flex</h2>
<p>吃性能</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Flex</span>(&#123;</span><br><span class="line">    <span class="attr">justifyContent</span>:<span class="title class_">FlexAlign</span>.<span class="property">SpaceAround</span>,</span><br><span class="line">    <span class="attr">direction</span>:<span class="title class_">FlexDirection</span>.<span class="property">Row</span>,</span><br><span class="line">    <span class="attr">wrap</span>:<span class="title class_">FlexWrap</span>.<span class="property">Wrap</span>,</span><br><span class="line">    <span class="attr">alignContent</span>:<span class="title class_">FlexAlign</span>.<span class="property">SpaceAround</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Tabs">Tabs</h2>
<p>一般用法：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Tabs</span>()&#123;</span><br><span class="line">    <span class="title class_">TabContent</span>()&#123;&#125;</span><br><span class="line">    .<span class="title function_">tabBar</span>(<span class="variable language_">this</span>.<span class="title function_">newTab</span>())</span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">barPosition</span>(<span class="title class_">BarPosition</span>.<span class="property">End</span>)</span><br><span class="line">.<span class="title function_">scrollable</span>(<span class="literal">false</span>)</span><br><span class="line">.<span class="title function_">onChange</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="title function_">newTab</span>(<span class="params"></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>自定义tabBar：不使用自定义导航栏时，系统默认的Tabs会实现切换逻辑。在使用了自定义导航栏后，切换页签的逻辑需要手动实现。即用户点击对应页签时，屏幕需要显示相应的内容页。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建controller</span></span><br><span class="line">tabsController : <span class="title class_">TabsController</span> = <span class="keyword">new</span> <span class="title class_">TabsController</span>()</span><br><span class="line"><span class="meta">@State</span> <span class="attr">currentIndex</span>:<span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//将controller赋予Tabs容器</span></span><br><span class="line"><span class="title class_">Tabs</span>(<span class="variable language_">this</span>.<span class="property">tabsController</span>)</span><br><span class="line"><span class="comment">//在自定义tabBar中实现切换逻辑</span></span><br><span class="line"><span class="meta">@Builder</span> <span class="title class_">TabBuilder</span>(<span class="attr">title</span>: <span class="built_in">string</span>, <span class="attr">targetIndex</span>: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="title class_">Column</span>() &#123;</span><br><span class="line">  ...</span><br><span class="line">  .<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentIndex</span> = targetIndex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tabsController</span>.<span class="title function_">changeIndex</span>(<span class="variable language_">this</span>.<span class="property">currentIndex</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony手势</title>
    <url>/posts/7dfe/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>模态转场</h1>
<p>新的界面覆盖在旧的界面上，旧的界面不消失</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>bindContentCover</td>
<td>自定义全屏的模态展示界面(e.g. 点击查看大图)</td>
</tr>
<tr>
<td>bindSheet</td>
<td>半模态展示界面(e.g. 分享框)</td>
</tr>
<tr>
<td>bindMenu</td>
<td>点击弹出菜单(e.g. 点击&quot;+&quot;号弹出菜单)</td>
</tr>
<tr>
<td>bindContextMenu</td>
<td>长按/右键点击弹出菜单(e.g. 长按浮起)</td>
</tr>
<tr>
<td>bindPopup</td>
<td>弹出Popup弹框(e.g. 弹出临时说明)</td>
</tr>
<tr>
<td>if</td>
<td>增加/删除组件(e.g. 临时显示某页面)</td>
</tr>
</tbody>
</table>
<h1>手势说明</h1>
<h2 id="触摸事件——手势的基础">触摸事件——手势的基础</h2>
<p>所有手势的基础：触摸事件(onTouch：Down，Up，Move，Cancel)</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">onTouch</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">switch</span>(event.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="comment">//按下</span></span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Down</span>:</span><br><span class="line">            <span class="comment">//event.touches[0]表示最新的数据</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pos x: &quot;</span>+event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pos y: &quot;</span>+event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="comment">//抬起</span></span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Up</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x: &quot;</span>+event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;y: &quot;</span>+event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="comment">//移动  </span></span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Move</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x: &quot;</span>+event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;y: &quot;</span>+event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">TouchType</span>.<span class="property">Cancel</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x: &quot;</span>+event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">x</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;y: &quot;</span>+event.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">y</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
<p>规则如下：</p>
<ol>
<li>
<p>监听onTouch事件的组件，若在手指落下时被触摸则均会收到onTouch事件的回调，被触摸受到触摸热区和触摸控制影响。</p>
</li>
<li>
<p>onTouch事件的回调是闭环的。若组件收到了手指Id为0的Down事件，后续也会收到手指Id为0的Move事件和Up事件。</p>
</li>
<li>
<p>onTouch事件的回调是一致的。若组件收到了手指Id为0的Down事件，而未收到手指Id为1的Down事件，后续只会收到手指Id为0的touch事件，不会收到手指Id为1的后续touch事件。</p>
</li>
<li>
<p>对于一般的容器组件，父子组件之间onTouch事件能够同时触发，兄弟组件之间onTouch事件根据布局进行触发。</p>
</li>
<li>
<p>除非显示声明允许多个手势同时成功，否则同一时间只会有一个手势响应</p>
</li>
</ol>
<h2 id="手势类型">手势类型</h2>
<table>
<thead>
<tr>
<th>手势类型</th>
<th>声明格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>点击</td>
<td>TapGesture(<br>  value?:{count?:number, fingers?:number}<br>)</td>
<td>上一次抬起和下一次按下的超时时间为300毫秒</td>
</tr>
<tr>
<td>长按</td>
<td>LongPressGesture(<br>    value?:{fingers?:number, repeat?:boolean, duration?:number}<br>)</td>
<td>长按所需的最短时间默认值为500</td>
</tr>
<tr>
<td>拖动</td>
<td>PanGesture(<br>  value?:{ fingers?:number, direction?:PanDirection, distance?:number}<br>)</td>
<td>滑动达到最小滑动距离（默认值为5vp）时拖动手势识别成功</td>
</tr>
<tr>
<td>捏合</td>
<td>PinchGesture(<br>    value?:{fingers?:number, distance?:number}<br>)</td>
<td>1. 触发所需手指数最小为2，最大为5<br>2. 触发最小距离默认值为5</td>
</tr>
<tr>
<td>旋转</td>
<td>RotationGesture(<br> value?:{fingers?:number, angle?:number}<br>)</td>
<td>1. 触发所需手指数最小为2，最大为5<br>2. 最小改变度数默认值为1deg</td>
</tr>
<tr>
<td>滑动</td>
<td>SwipeGesture(<br>    value?:{fingers?:number, direction?:SwipeDirection, speed?:number}v)</td>
<td>滑动速度大于100vp/s时可以识别成功</td>
</tr>
</tbody>
</table>
<h1>组合手势</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">GestureGroup</span>(<span class="attr">mode</span>:<span class="title class_">GestureMode</span>, <span class="attr">gesture</span>:<span class="title class_">GestureType</span>[])</span><br></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手势触发后出现的内容</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="title function_">content</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title class_">Column</span>()&#123;</span><br><span class="line">    <span class="title class_">Row</span>(&#123;<span class="attr">space</span>:<span class="number">100</span>&#125;)&#123;</span><br><span class="line">    <span class="title class_">Text</span>(<span class="string">&quot;AAAAA&quot;</span>)</span><br><span class="line">        .<span class="title function_">width</span>(<span class="string">&quot;20%&quot;</span>)</span><br><span class="line">        .<span class="title function_">aspectRatio</span>(<span class="number">1</span>)</span><br><span class="line">        .<span class="title function_">backgroundColor</span>(<span class="title class_">Color</span>.<span class="property">Pink</span>)</span><br><span class="line">        .<span class="title function_">borderRadius</span>(<span class="number">100</span>)</span><br><span class="line">        .<span class="title function_">rotate</span>(&#123;</span><br><span class="line">        <span class="attr">angle</span>:<span class="number">30</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="title class_">Text</span>(<span class="string">&quot;BBBBBB&quot;</span>)</span><br><span class="line">        .<span class="title function_">width</span>(<span class="string">&quot;20%&quot;</span>)</span><br><span class="line">        .<span class="title function_">aspectRatio</span>(<span class="number">1</span>)</span><br><span class="line">        .<span class="title function_">backgroundColor</span>(<span class="title class_">Color</span>.<span class="property">Blue</span>)</span><br><span class="line">        .<span class="title function_">borderRadius</span>(<span class="number">100</span>)</span><br><span class="line">        .<span class="title function_">rotate</span>(&#123;</span><br><span class="line">        <span class="attr">angle</span>:-<span class="number">30</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title class_">Image</span>(<span class="string">&#x27;https://img-s-msn-com.akamaized.net/tenant/amp/entityid/AA1rYtdV.img?w=768&amp;h=607&amp;m=6&amp;x=439&amp;y=181&amp;s=163&amp;d=163&#x27;</span>)</span><br><span class="line">    .<span class="title function_">width</span>(<span class="string">&quot;30%&quot;</span>)</span><br><span class="line">    .<span class="title function_">aspectRatio</span>(<span class="number">16</span>/<span class="number">9</span>)</span><br><span class="line">    .<span class="title function_">bindContentCover</span>(<span class="variable language_">this</span>.<span class="property">isShow</span>,<span class="variable language_">this</span>.<span class="property">content</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//触发手势</span></span><br><span class="line"><span class="title class_">Button</span>(<span class="string">&#x27;change&#x27;</span>)</span><br><span class="line">    .<span class="title function_">gesture</span>(</span><br><span class="line">    <span class="comment">//GestureMode：Sequence、Parallel(并行执行)、Exclude(只能执行一个)</span></span><br><span class="line">    <span class="title class_">GestureGroup</span>(<span class="title class_">GestureMode</span>.<span class="property">Sequence</span>,</span><br><span class="line">    <span class="comment">//长按触发</span></span><br><span class="line">    <span class="title class_">LongPressGesture</span>()</span><br><span class="line">        .<span class="title function_">onAction</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">onActionEnd</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">onActionCancel</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;over&quot;</span>&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        ,</span><br><span class="line">    <span class="comment">//拖拽触发</span></span><br><span class="line">    <span class="title class_">PanGesture</span>()</span><br><span class="line">        .<span class="title function_">onActionStart</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">onActionUpdate</span>(<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(event.<span class="property">fingerList</span>[<span class="number">0</span>].<span class="property">globalX</span>&lt;<span class="variable language_">this</span>.<span class="property">screenWidth</span>/<span class="number">2</span>)</span><br><span class="line">            <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;left&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span> <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;right&quot;</span>&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">onActionEnd</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">onActionCancel</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;over&quot;</span>&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取屏幕宽度，1vp = 3px</span></span><br><span class="line"><span class="title function_">aboutToAppear</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">screenWidth</span> = <span class="title function_">px2vp</span>(display.<span class="title function_">getDefaultDisplaySync</span>().<span class="property">width</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1>组合手势冲突说明</h1>
<h2 id="优先级">优先级</h2>
<ul>
<li>系统 &gt; 自定义</li>
<li>除非显示声明允许多个手势同时成功，否则同一时间只会有一个手势响应<br>
响应优先级遵循以下条件：</li>
</ul>
<ol>
<li>当父子组件均绑定同一类手势时，子&gt;父(</li>
<li>当一个组件绑定多个手势时，先达到手势触发条件的手势优先</li>
<li>如果父以带优先级的方式绑定手势(.priorityGesture)，则可父&gt;子</li>
<li>当父组件以.parallelGesture的形式绑定手势时，父和子所绑定的手势均可触发</li>
</ol>
<h2 id="冲突事件">冲突事件</h2>
<p>冲突事件 | 运行逻辑 |<br>
当有两次点击时 | 手势响应取决于绑定手势的顺序</p>
<ol>
<li>若先绑定单击手势后绑定双击手势，单击手势在第一次点击时即宣告识别成功，此时双击手势已经失败。即使在规定时间内进行了第二次点击，双击手势事件也不会进行响应，此时会触发单击手势事件的第二次识别成功</li>
<li>若先绑定双击手势后绑定单击手势，则会响应双击手势不响应单击手势</li>
</ol>
<h1>自定义控制的多层级手势事件</h1>
<p>通过设置属性，控制默认的多层级手势事件竞争流程</p>
<ul>
<li>responseRegion属性和hitTestBehavior属性可以控制Touch事件的分发，从而可以影响到onTouch事件和手势的响应</li>
<li>绑定手势方法属性可以控制手势的竞争从而影响手势的响应，但不能影响到onTouch事件</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>.responseRegion({Rect1, Rect2, Rect3})</td>
<td>1. 实现组件的响应区域范围的变化<br> 2. 响应区域范围可以超出或者小于组件的布局范围 <br>3. 绑定responseRegion后，手势与事件的响应区域范围将以所绑定的区域范围为准，而不是以布局区域为准</td>
</tr>
<tr>
<td>.hitTestBehavior(<a href="http://HitTestMode.XXX">HitTestMode.XXX</a>)</td>
<td>使一些组件能够响应手势和事件，而一些组件不能响应手势和事件</td>
</tr>
</tbody>
</table>
<p>tips: HitTestMode中sequence中第一个的onActionEnd不会执行，只会执行最后一个的</p>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony基本原理(1)——框架结构</title>
    <url>/posts/fdb3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>系统能力(SysCap)</h1>
<ul>
<li>SysCap5指OS每个独立的特性，如蓝牙、WIFI。</li>
<li>每个系统能力对应多个API</li>
<li>随目标设备是否支持该系统能力而共同存在或消失，也会随着DevEco Studio一起提供给开发者做联想</li>
</ul>
<h2 id="重要的系统能力">重要的系统能力</h2>
<table>
<thead>
<tr>
<th>能力集</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>支持能力集</td>
<td>设备<br>SDK将设备分为两组，典型设备和自定义设备，典型设备的支持能力集由HarmonyOS来定义，自定义设备由设备厂商给出</td>
</tr>
<tr>
<td>应用能力集</td>
<td>应用</td>
</tr>
<tr>
<td>联想能力集</td>
<td>DevEco Studio可联想的APIDevEco Studio可联想的API</td>
</tr>
</tbody>
</table>
<ul>
<li>SDK向DevEco Studio提供全量API，DevEco Studio识别开发者项目中选择的设备形态，找到该设备的支持能力集，筛选支持能力集包含的API并提供API联想</li>
<li>单设备：默认应用的联想能力集，要求系统能力集和设备的支持系统能力集相等</li>
<li>多设备：默认应用的联想能力集是多个设备支持能力集的并集，要求能力集则是交集</li>
</ul>
<h2 id="自定义syscap">自定义syscap</h2>
<p>需要的能力超出工程默认设备定义的能力集范围，需要额外配置自定义的syscap</p>
<ol>
<li>/src/main目录下，手动创建syscap.json文件，并写入如下内容</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;devices&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;general&quot;</span>: [</span><br><span class="line">      <span class="comment">// 每一个典型设备对应一个syscap支持能力集，可配置多个典型设备，应与工程所选择的设备一致</span></span><br><span class="line">      <span class="string">&quot;phone&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;development&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// addedSysCaps内的sycap集合与devices中配置的各设备支持的syscap集合的并集共同构成联想能力集。</span></span><br><span class="line">    <span class="string">&quot;addedSysCaps&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;SystemCapability.Communication.NFC.Core&quot;</span>,</span><br><span class="line">      <span class="string">&quot;SystemCapability.Communication.NFC.CardEmulation&quot;</span>,</span><br><span class="line">      <span class="string">&quot;SystemCapability.Communication.NFC.Tag&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="判断-API-是否可以使用">判断 API 是否可以使用</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//API canIUse</span></span><br><span class="line"><span class="title function_">canIUse</span>(<span class="string">&quot;SystemCapability.ArkUI.ArkUI.Full&quot;</span>)</span><br><span class="line"><span class="comment">//判断geolocationManager是否存在</span></span><br><span class="line"><span class="keyword">import</span> geolocationManager <span class="keyword">from</span> <span class="string">&#x27;@ohos.geoLocationManager&#x27;</span>;</span><br><span class="line">geolocationManager</span><br></pre></td></tr></table></figure>
<h1>OpenHarmony框架</h1>
<p><img src="/source/Harmony/OH_Frame.png" alt="OpenHarmony框架" title="OpenHarmony框架"></p>
<ul>
<li>系统功能按照“系统 &gt; 子系统 &gt; 组件”逐级展开<br>
层级|功能<br>
-----|-----<br>
应用层|包括系统应用和第三方非系统应用<br>应用由一个或多个FA（Feature Ability）或PA（Particle Ability）组成<br>其中，FA有UI界面，提供与用户交互的能力；而PA无UI界面，提供后台运行任务的能力以及统一的数据访问抽象<br>基于FA/PA开发的应用，能够实现特定的业务功能，支持跨设备调度与分发，为用户提供一致、高效的应用体验。<br>
框架层|为应用开发提供C/C++/JS等多语言的用户程序框架和Ability框架，适用于JS语言的ArkUI框架，以及各种软硬件服务对外开放的多语言框架API<br>根据系统的组件化裁剪程度，设备支持的API也会有所不同。<br>
系统服务层|OpenHarmony 的核心能力集合，通过框架层对应用程序提供服务<br>1. 系统基本能力子系统集：为分布式应用在多设备上的运行、调度、迁移等操作提供了基础能力，由分布式软总线、分布式数据管理、分布式任务调度、公共基础库、多模输入、图形、安全、AI等子系统组成<br>2. 基础软件服务子系统集：提供公共的、通用的软件服务，由事件通知、电话、多媒体、DFX（Design For X） 等子系统组成。<br>3. 增强软件服务子系统集：提供针对不同设备的、差异化的能力增强型软件服务，由智慧屏专有业务、穿戴专有业务、IoT专有业务等子系统组成。<br>4. 硬件服务子系统集：提供硬件服务，由位置服务、用户IAM、穿戴专有硬件服务、IoT专有硬件服务等子系统组成。<br>根据不同设备形态的部署环境，基础软件服务子系统集、增强软件服务子系统集、硬件服务子系统集内部可以按子系统粒度裁剪，每个子系统内部又可以按功能粒度裁剪<br>
内核层|内核子系统：采用多内核（Linux内核或者LiteOS）设计，支持针对不同资源受限设备选用适合的OS内核。内核抽象层（KAL，Kernel Abstract Layer）通过屏蔽多内核差异，对上层提供基础的内核能力，包括进程/线程管理、内存管理、文件系统、网络管理和外设管理等。<br>驱动子系统：驱动框架（HDF）是系统硬件生态开放的基础，提供统一外设访问能力和驱动开发、管理框架。</li>
</ul>
<h1>ArkUI</h1>
<p><img src="/source/Harmony/ArkUI_Frame.png" alt="ArkUI框架" title="ArkUI框架"></p>
<h1>DevEco项目结构</h1>
]]></content>
      <tags>
        <tag>鸿蒙基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony权限</title>
    <url>/posts/f140/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>应用权限保护的对象</h1>
<h1>权限使用基本原则</h1>
<ul>
<li>应用（包括应用引用的三方库）所需权限必须在应用的配置文件中严格按照权限开发指导逐个声明</li>
<li>权限申请满足最小化原则，禁止申请非必要的、已废弃的权限</li>
<li>应用申请敏感权限时，必须填写权限使用理由字段</li>
<li>应用敏感权限须在对应业务功能执行前动态申请，满足隐私最小化要求</li>
<li>用户拒绝授予某个权限后，应用与此权限无关的其他业务功能应允许正常使用</li>
</ul>
<h1>授权方式</h1>
<h2 id="系统授权">系统授权</h2>
<p>在应用中申请system_grant权限。被允许访问的数据不会涉及到用户或设备的敏感信息，应用被允许执行的操作对系统或者其他应用产生的影响可控</p>
<h2 id="用户授权">用户授权</h2>
<h1>授权示例</h1>
<h2 id="定位授权">定位授权</h2>
<ol>
<li>在src/main/resources/module.json5中配置申请</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;requestPermissions&quot;</span>: [&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ohos.permission.INTERNET&quot;</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ohos.permission.LOCATION&quot;</span>,</span><br><span class="line">  <span class="comment">//模式串需在resources/base/element/string.json中配置键值对location_reason</span></span><br><span class="line">  <span class="comment">//再按如下方式在&quot;reason&quot;中进行引用</span></span><br><span class="line">  <span class="string">&quot;reason&quot;</span> : <span class="string">&quot;$string:location_reason&quot;</span>,</span><br><span class="line">  <span class="string">&quot;usedScene&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;abilities&quot;</span>: [<span class="string">&quot;EntryAbility&quot;</span>],</span><br><span class="line">    <span class="string">&quot;when&quot;</span>: <span class="string">&quot;always&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ohos.permission.APPROXIMATELY_LOCATION&quot;</span>,</span><br><span class="line">    <span class="string">&quot;reason&quot;</span> : <span class="string">&quot;$string:location_reason&quot;</span>,</span><br><span class="line">    <span class="string">&quot;usedScene&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;abilities&quot;</span>: [<span class="string">&quot;EntryAbility&quot;</span>],</span><br><span class="line">      <span class="string">&quot;when&quot;</span>: <span class="string">&quot;always&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在模拟器设置中打开“系统”——“日期和时间”——“定位服务”——“访问我的位置”</li>
<li>右侧边栏中打开GPS配置GPS模拟</li>
<li>编写获取位置代码</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; abilityAccessCtrl, bundleManager, common &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.AbilityKit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; geoLocationManager &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.LocationKit&#x27;</span>;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getLocation</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> manager = abilityAccessCtrl.<span class="title function_">createAtManager</span>()</span><br><span class="line">    <span class="comment">//上下文获取</span></span><br><span class="line">    <span class="comment">//1. page中getContext</span></span><br><span class="line">    <span class="comment">//2. Ability中this.context</span></span><br><span class="line">    <span class="keyword">await</span> manager.<span class="title function_">requestPermissionsFromUser</span>(<span class="title function_">getContext</span>(<span class="variable language_">this</span>),[</span><br><span class="line">      <span class="string">&quot;ohos.permission.LOCATION&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ohos.permission.APPROXIMATELY_LOCATION&quot;</span></span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">const</span> bundleInfo = bundleManager.<span class="title function_">getBundleInfoForSelfSync</span>(bundleManager.<span class="property">BundleFlag</span>.<span class="property">GET_BUNDLE_INFO_WITH_APPLICATION</span>)</span><br><span class="line">    <span class="keyword">const</span> accTokenId = bundleInfo.<span class="property">appInfo</span>.<span class="property">accessTokenId</span></span><br><span class="line">    <span class="keyword">const</span> state = manager.<span class="title function_">checkAccessTokenSync</span>(accTokenId,<span class="string">&quot;ohos.permission.LOCATION&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(state == abilityAccessCtrl.<span class="property">GrantStatus</span>.<span class="property">PERMISSION_DENIED</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> abilityContext = <span class="title function_">getContext</span>(<span class="variable language_">this</span>) <span class="keyword">as</span> common.<span class="property">UIAbilityContext</span></span><br><span class="line">      abilityContext.<span class="title function_">startAbility</span>(&#123;</span><br><span class="line">        <span class="attr">bundleName</span>:<span class="string">&#x27;com.huawei.hmos.settings&#x27;</span>,</span><br><span class="line">        <span class="attr">abilityName</span>:<span class="string">&#x27;com.huawei.hmos.settings.MainAbility&#x27;</span>,</span><br><span class="line">        <span class="attr">uri</span>:<span class="string">&#x27;application_info_entry&#x27;</span>,</span><br><span class="line">        <span class="attr">parameters</span>:&#123;</span><br><span class="line">          <span class="attr">pushParams</span>:bundleInfo.<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;agree&quot;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>获取位置信息</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; geoLocationManager &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.LocationKit&#x27;</span>;</span><br><span class="line">geoLocationManager.<span class="title function_">getCurrentLocation</span>()</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">              <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;$&#123;JSON.stringify(val)&#125;&#x27;</span> &#125;)</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>封装工具类<br>
tips:alt+shift+enter</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RequestPermisssionUtils</span></span><br><span class="line"><span class="keyword">import</span> &#123; abilityAccessCtrl, bundleManager, common, <span class="title class_">Permissions</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.AbilityKit&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getLocation</span>(<span class="params"><span class="attr">context</span>: <span class="title class_">Context</span>, <span class="attr">callback</span>: () =&gt; <span class="built_in">void</span>, <span class="attr">permission</span>: <span class="title class_">Permissions</span>[]</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> manager = abilityAccessCtrl.<span class="title function_">createAtManager</span>()</span><br><span class="line">  <span class="comment">//上下文获取</span></span><br><span class="line">  <span class="comment">//1. page中getContext</span></span><br><span class="line">  <span class="comment">//2. Ability中this.context</span></span><br><span class="line">  <span class="keyword">await</span> manager.<span class="title function_">requestPermissionsFromUser</span>(context,[</span><br><span class="line">    <span class="string">&quot;ohos.permission.LOCATION&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ohos.permission.APPROXIMATELY_LOCATION&quot;</span></span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">const</span> bundleInfo = bundleManager.<span class="title function_">getBundleInfoForSelfSync</span>(bundleManager.<span class="property">BundleFlag</span>.<span class="property">GET_BUNDLE_INFO_WITH_APPLICATION</span>)</span><br><span class="line">  <span class="keyword">const</span> accTokenId = bundleInfo.<span class="property">appInfo</span>.<span class="property">accessTokenId</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> state = manager.<span class="title function_">checkAccessTokenSync</span>(accTokenId,permission[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">if</span>(state == abilityAccessCtrl.<span class="property">GrantStatus</span>.<span class="property">PERMISSION_DENIED</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> abilityContext = context <span class="keyword">as</span> common.<span class="property">UIAbilityContext</span></span><br><span class="line">    abilityContext.<span class="title function_">startAbility</span>(&#123;</span><br><span class="line">      <span class="attr">bundleName</span>:<span class="string">&#x27;com.huawei.hmos.settings&#x27;</span>,</span><br><span class="line">      <span class="attr">abilityName</span>:<span class="string">&#x27;com.huawei.hmos.settings.MainAbility&#x27;</span>,</span><br><span class="line">      <span class="attr">uri</span>:<span class="string">&#x27;application_info_entry&#x27;</span>,</span><br><span class="line">      <span class="attr">parameters</span>:&#123;</span><br><span class="line">        <span class="attr">pushParams</span>:bundleInfo.<span class="property">name</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony性能优化</title>
    <url>/posts/21b1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>懒加载</h1>
<p>使用LazyForEach而不是ForEach。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">LazyForEach</span>(<span class="variable language_">this</span>.<span class="property">data</span>, <span class="function">(<span class="params"><span class="attr">item</span>: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">ListItem</span>() &#123;</span><br><span class="line">          <span class="title class_">Row</span>() &#123;</span><br><span class="line">            <span class="title class_">Text</span>(item).<span class="title function_">fontSize</span>(<span class="number">20</span>).<span class="title function_">margin</span>(&#123; <span class="attr">left</span>: <span class="number">10</span> &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">.<span class="title function_">onClick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">pushData</span>(<span class="string">&#x27;item value: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">totalCount</span>())</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, <span class="function"><span class="params">item</span> =&gt;</span> item)      </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony基本原理(2)——Stage模型</title>
    <url>/posts/8aee/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>应用程序包</h1>
<ul>
<li>应用所对应的软件包文件，称为“应用程序包”</li>
<li>系统提供了应用程序包开发、安装、查询、更新、卸载的管理机制</li>
<li>系统还屏蔽了不同的芯片平台的差异</li>
</ul>
<h1>多Module设计机制</h1>
<h2 id="模块化开发">模块化开发</h2>
<ul>
<li>应用通常会包含多种功能，将每个功能模块作为一个独立的Module进行开发</li>
<li>可以包含源代码、资源文件、第三方库、配置文件等</li>
<li>Module可以独立编译，实现特定的功能</li>
</ul>
<table>
<thead>
<tr>
<th>Module类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ability类型</td>
<td>1. 每一个Ability类型的Module编译后，会生成一个以.hap为后缀的文件<br>2. HAP包可以独立安装和运行，是应用安装的基本单位，一个应用中可以包含一个或多个HAP包<br> 3.1. entry类型的Module：编译后生成entry类型的HAP。每一个应用分发到同一类型的设备上的应用程序包，只能包含唯一一个entry类型的HAP<br> 3.2. 编译后生成feature类型的HAP。一个应用中可以包含一个或多个feature类型的HAP，也可以不包含。</td>
</tr>
<tr>
<td>Library类型的Module</td>
<td>1. 实现代码和资源的共享<br>2.1 Static Library：静态共享库。编译后会生成一个以.har为后缀的文件，即静态共享包HAR（Harmony Archive）<br>2.2 Shared Library：动态共享库。编译后会生成一个以.hsp为后缀的文件，即动态共享包HSP（Harmony Shared Package）</td>
</tr>
</tbody>
</table>
<h2 id="多设备适配">多设备适配</h2>
<h1>Stage模型概述</h1>
<h2 id="概述">概述</h2>
<p>Stage模型是</p>
<blockquote>
<ol>
<li>Stage模型中，多个应用组件共享同一个ArkTS引擎实例，在Stage模型中，应用组件之间可以方便的共享对象和状态，同时减少复杂应用运行对内存的占用。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Stage模型](https://developer.huawei.com/consumer/cn/arkui/arkui-stage)
">[1]</span></a></sup></li>
<li>Stage模型提供了AbilityStage、WindowStage等类作为应用组件和Window窗口的“舞台”，因此称这种应用模型为Stage模型。</li>
</ol>
</blockquote>
<h2 id="设计思路">设计思路</h2>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart TB;
    target1((应用能力与系统性能平衡))
    target2((原生支持组件级迁移与协同))
    target3((支持多设备、多窗口))
    method1[Ability与UI分离]
    method2[后台管理]
    method3[基于场景的服务机制]
    method4[单进程模型]
    method5[UI与服务统一的Ability组件]
    method6[Ability生命周期定义]
    method7[组件管理与窗口管理解耦]
    target1--&gt;method1
    target1--&gt;method2
    target1--&gt;method3
    target1--&gt;method4
    target2--&gt;method1
    target2--&gt;method5
    target3--&gt;method6
    target3--&gt;method7
  </pre></div>
<h1>整体结构</h1>
<p><img src="/Harmony/ui-qt.jpg" alt="Stage模型" title="Stage模型"></p>
<h2 id="各类组件">各类组件</h2>
<p>Satge模型提供UIAbility和ExtensionAbility两种组件，有具体类承载，支持面向对象。<br>
其中，UIAbility、ExtensionAbility等组件详情如下：</p>
<h3 id="UIAbility组件">UIAbility组件</h3>
<ul>
<li>包含UI的应用组件，主要用于和用户交互</li>
<li>生命周期只包含创建/销毁/前台/后台等状态</li>
</ul>
<h3 id="ExtensionAbility组件">ExtensionAbility组件</h3>
<ul>
<li>面向特定场景的应用组件</li>
<li>需要使用ExtensionAbility的派生类</li>
<li>ExtensionAbility派生类实例由用户触发创建，并由系统管理<em>生命周期</em></li>
</ul>
<h3 id="WindowStage类">WindowStage类</h3>
<ul>
<li>与显示相关的状态通过WindowStage的事件暴露给开发者</li>
<li>每个UIAbility类实例都会与一个WindowStage类实例绑定</li>
<li>提供了应用进程内窗口管理器的作用</li>
<li>包含一个主窗口。UIAbility通过WindowStage持有了一个主窗口，该主窗口为ArkUI提供了绘制区域</li>
</ul>
<h3 id="Context">Context</h3>
<ul>
<li>Context及其派生类向开发者提供在运行期可以调用的各种资源和能力</li>
<li>UIAbility组件和各种ExtensionAbility派生类都有各自不同的Context类</li>
</ul>
<h3 id="AbilityStage">AbilityStage</h3>
<ul>
<li>每个Entry类型或者Feature类型的HAP在运行期都有一个AbilityStage类实例</li>
<li>HAP中的代码首次被加载到进程中的时候，系统会先创建AbilityStage实例</li>
<li>每个在该HAP中定义的UIAbility类，在实例化后都会与该实例产生关联</li>
<li>可通过AbilityStage获取该HAP中UIAbility实例的运行时信息</li>
</ul>
<h2 id="Stage模型开发流程">Stage模型开发流程</h2>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart LR
    A[应用组件开发] --&gt; B[进程模型]
    B --&gt;  C[线程模型]
    C --&gt; D[应用配置]
  </pre></div>
<h1>相关概念补充</h1>
<h2 id="HAP-Harmony-Ability-Package">HAP(Harmony Ability Package)</h2>
<ul>
<li>应用安装与运行的单元</li>
<li>将code、resources、config、std library等打包为模块</li>
<li>分为entry(应用入口、基础功能)和feature(动态特性)两类</li>
<li>单个HAP(无ExtensionAbility)：1个Entry+m个feature。推荐1个UIAbility+m个页面</li>
<li>多个HAP：n个Entry+m个feature。每个HAP1个UIAbility或ExtensionAbility</li>
</ul>
<h2 id="HAR-HarmonyOS-Ability-Resource-sup-id-fnref-2-a-href-fn-2-rel-footnote-span-class-hint-top-hint-error-hint-medium-hint-rounded-hint-bounce-aria-label-HAR-https-blog-csdn-net-u014696856-article-details-142211942-2-span-a-sup">HAR(HarmonyOS Ability Resource)<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[HAR](https://blog.csdn.net/u014696856/article/details/142211942)">[2]</span></a></sup></h2>
<ul>
<li>静态共享包，用于封装和共享代码、资源和第三方库，允许开发者将独立的功能模块打包并发布为一个可重用的单元</li>
<li>不仅可以包含代码文件，还可以包括UI布局、图片、配置文件、第三方库等资源</li>
<li>实现代码的模块化和复用</li>
</ul>
<h2 id="HSP-Harmony-Shared-Package">HSP(Harmony Shared Package)</h2>
<ul>
<li>动态共享包</li>
<li>与宿主应用同进程、命名空间、生命周期</li>
</ul>
<hr>
<h1>参考文献：</h1>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://developer.huawei.com/consumer/cn/arkui/arkui-stage">Stage模型</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/u014696856/article/details/142211942">HAR</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <tags>
        <tag>鸿蒙基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony媒体相关</title>
    <url>/posts/86c4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>媒体组件</h1>
<h2 id="Video">Video</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">controller</span>:<span class="title class_">VideoController</span>=<span class="keyword">new</span> <span class="title class_">VideoController</span>()</span><br><span class="line"><span class="title class_">Video</span>(&#123;<span class="attr">src</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">currentProgressRate</span>:<span class="variable language_">this</span>.<span class="property">speed</span>,<span class="attr">controller</span>:<span class="variable language_">this</span>.<span class="property">controller</span>&#125;)</span><br><span class="line">    .<span class="title function_">controls</span>(<span class="literal">false</span>)</span><br><span class="line">    .<span class="title function_">onPrepared</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentPlayIndex</span>==<span class="variable language_">this</span>.<span class="property">currentIndex</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">controller</span>.<span class="title function_">start</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">controller</span>.<span class="title function_">start</span>()</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">controller</span>.<span class="title function_">pause</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony最佳实践</title>
    <url>/posts/e1d9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony通用信息(2)——通用事件</title>
    <url>/posts/68be/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>通用事件</h1>
<h2 id="点击">点击</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//distanceThreshold参数作为点击事件移动阈值，当手指的移动距离超出所设置的点击手势移动阈值时，点击手势识别失败</span></span><br><span class="line"><span class="comment">//distanceThreshold默认值：2^31-1</span></span><br><span class="line"><span class="title function_">onClick</span>(<span class="attr">event</span>: <span class="title class_">Callback</span>&lt;<span class="title class_">ClickEvent</span>&gt;, <span class="attr">distanceThreshold</span>: <span class="built_in">number</span>): T</span><br></pre></td></tr></table></figure>
<h2 id="触摸">触摸</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当手指在组件上按下、滑动、抬起时触发。</span></span><br><span class="line"><span class="title function_">onTouch</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">TouchEvent</span></span>) =&gt;</span> <span class="built_in">void</span>): T</span><br><span class="line"><span class="comment">//该接口只能在TouchEvent中调用</span></span><br><span class="line"><span class="comment">//通过该接口获取触发onTouch时当前帧历史点的相关信息。</span></span><br><span class="line"><span class="comment">//onTouch一帧只会调用一次，若当前帧收到的TouchEvent大于1，会将该帧最后一个点通过onTouch返还，剩余点作为历史点</span></span><br><span class="line"><span class="title function_">getHistoricalPoints</span>(): <span class="title class_">Array</span>&lt;<span class="title class_">HistoricalPoint</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="挂载卸载">挂载卸载</h2>
<p>组件从组件树上挂载、卸载时触发的事件。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件挂载至组件树时触发此回调。</span></span><br><span class="line"><span class="comment">//回调的调用时机一定在组件布局渲染之前</span></span><br><span class="line"><span class="comment">//不允许在回调中对组件树进行变更</span></span><br><span class="line"><span class="comment">//T表示返回当前组件。</span></span><br><span class="line"><span class="title function_">onAttach</span>(<span class="attr">callback</span>: <span class="title class_">Callback</span>&lt;<span class="built_in">void</span>&gt;): T</span><br><span class="line"><span class="comment">//组件从组件树卸载时触发此回调</span></span><br><span class="line"><span class="title function_">onDetach</span>(<span class="attr">callback</span>: <span class="title class_">Callback</span>&lt;<span class="built_in">void</span>&gt;): T</span><br><span class="line"><span class="comment">//组件挂载显示后触发此回调</span></span><br><span class="line"><span class="comment">//回调的调用时机有可能发生在组件布局渲染后</span></span><br><span class="line"><span class="title function_">onAppear</span>(<span class="attr">event</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>): T</span><br><span class="line"><span class="comment">//组件卸载消失时触发此回调。</span></span><br><span class="line"><span class="title function_">onDisAppear</span>(<span class="attr">event</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>): T</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="拖拽">拖拽</h2>
<p>可通过将draggable属性设置为true达成拖拽功能的组件有：</p>
<ul>
<li>默认支持拖出能力的组件（可从组件上拖出数据）：Search、TextInput、TextArea、RichEditor、Text、Image、Hyperlink</li>
<li>默认支持拖入能力的组件（目标组件可响应拖入数据）：Search、TextInput、TextArea、Video<br>
其他组件需要开发者将draggable属性设置为true，并在onDragStart等接口中实现数据传输相关内容，才能正确处理拖拽</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一次拖拽此事件绑定的组件时，长按时间 &gt;= 500ms，然后手指移动距离 &gt;= 10vp，触发回调</span></span><br><span class="line"><span class="title function_">onDragStart</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DragEvent</span>, extraParams?: <span class="built_in">string</span></span>) =&gt;</span> <span class="title class_">CustomBuilder</span> | <span class="title class_">DragItemInfo</span>)</span><br><span class="line"><span class="comment">//拖拽进入组件范围内时，触发回调，当监听了onDrop事件时，此事件才有效</span></span><br><span class="line"><span class="title function_">onDragEnter</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DragEvent</span>, extraParams?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>)</span><br><span class="line"><span class="comment">//拖拽在组件范围内移动时，触发回调，当监听了onDrop事件时，此事件才有效</span></span><br><span class="line"><span class="title function_">onDragMove</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DragEvent</span>, extraParams?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>)</span><br><span class="line"><span class="comment">//拖拽离开组件范围内时，触发回调，当监听了onDrop事件时，此事件才有效</span></span><br><span class="line"><span class="title function_">onDragLeave</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DragEvent</span>, extraParams?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>)</span><br><span class="line"><span class="comment">//在本组件范围内停止拖拽行为时，触发回调</span></span><br><span class="line"><span class="title function_">onDrop</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DragEvent</span>, extraParams?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>)</span><br><span class="line"><span class="comment">//绑定此事件的组件触发的拖拽结束后，触发回调</span></span><br><span class="line"><span class="title function_">onDragEnd</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">DragEvent</span>, extraParams?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>)</span><br><span class="line"><span class="comment">//绑定此事件的组件，当触发拖拽发起前的不同阶段时，触发回调</span></span><br><span class="line"><span class="title function_">onPreDrag</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">preDragStatus</span>: <span class="title class_">PreDragStatus</span></span>) =&gt;</span> <span class="built_in">void</span>)</span><br></pre></td></tr></table></figure>
<h2 id="按键">按键</h2>
<p>按键事件指组件与键盘、遥控器等按键设备交互时触发的事件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定该方法的组件获焦后，按键动作触发该回调</span></span><br><span class="line"><span class="title function_">onKeyEvent</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">KeyEvent</span></span>) =&gt;</span> <span class="built_in">void</span>): T</span><br><span class="line"><span class="comment">//绑定该方法的组件获焦后，按键动作优先触发该回调</span></span><br><span class="line"><span class="comment">//回调的返回值为true时，视作该按键事件已被消费，后续的事件回调（keyboardShortcut、输入法事件、onKeyEvent）会被拦截，不再触发</span></span><br><span class="line"><span class="title function_">onKeyPreIme</span>(<span class="attr">event</span>: <span class="title class_">Callback</span>&lt;<span class="title class_">KeyEvent</span>, <span class="built_in">boolean</span>&gt;): T</span><br></pre></td></tr></table></figure>
<h2 id="焦点">焦点</h2>
<p>焦点事件指页面焦点在可获焦组件间移动时触发的事件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前组件获取焦点时触发的回调</span></span><br><span class="line"><span class="title function_">onFocus</span>(<span class="attr">event</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>)</span><br><span class="line"><span class="comment">//当前组件失去焦点时触发的回调</span></span><br><span class="line"><span class="title function_">onBlur</span>(<span class="attr">event</span>:<span class="function">() =&gt;</span> <span class="built_in">void</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="鼠标">鼠标</h2>
<p>在鼠标的单个动作触发多个事件时，事件的顺序是固定的，鼠标事件默认透传</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前组件被鼠标按键点击时或者鼠标在组件上悬浮移动时，触发该回调</span></span><br><span class="line"><span class="title function_">onMouse</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">event</span>: <span class="title class_">MouseEvent</span></span>) =&gt;</span> <span class="built_in">void</span>)</span><br></pre></td></tr></table></figure>
<h2 id="悬浮">悬浮</h2>
<p>鼠标滑动，或者手写笔在屏幕上悬浮移动扫过组件时触发</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//鼠标或手写笔进入或退出组件时触发hover事件</span></span><br><span class="line"><span class="title function_">onHover</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">isHover</span>: <span class="built_in">boolean</span>, <span class="attr">event</span>: <span class="title class_">HoverEvent</span></span>) =&gt;</span> <span class="built_in">void</span>): T</span><br></pre></td></tr></table></figure>
<h2 id="无障碍悬浮">无障碍悬浮</h2>
<p>开启无障碍模式后，Touch事件会转换为无障碍悬浮事件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启无障碍模式后，单指触摸绑定该回调的组件时触发该回调</span></span><br><span class="line"><span class="title function_">onAccessibilityHover</span>(<span class="attr">callback</span>: <span class="title class_">AccessibilityCallback</span>): T</span><br><span class="line"><span class="comment">//提供开启无障碍模式后的无障碍悬浮回调事件类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AccessibilityCallback</span> = <span class="function">(<span class="params"><span class="attr">isHover</span>: <span class="built_in">boolean</span>, <span class="attr">event</span>: <span class="title class_">AccessibilityHoverEvent</span></span>) =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure>
<h2 id="组件区域变化">组件区域变化</h2>
<p>组件区域变化事件指组件显示的尺寸、位置等发生变化时触发的事件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件区域变化时触发该回调</span></span><br><span class="line"><span class="comment">//仅会响应由布局变化所导致的组件大小、位置发生变化时的回调</span></span><br><span class="line"><span class="title function_">onAreaChange</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">oldValue</span>: <span class="title class_">Area</span>, <span class="attr">newValue</span>: <span class="title class_">Area</span></span>) =&gt;</span> <span class="built_in">void</span>): T</span><br></pre></td></tr></table></figure>
<h2 id="组件尺寸变化">组件尺寸变化</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件区域变化时触发该回调。仅会响应由布局变化所导致的组件尺寸发生变化时的回调</span></span><br><span class="line"><span class="title function_">onSizeChange</span>(<span class="attr">event</span>: <span class="title class_">SizeChangeCallback</span>): T</span><br><span class="line"><span class="comment">//组件区域变化时的回调类型</span></span><br><span class="line"><span class="title class_">SizeChangeCallback</span> = <span class="function">(<span class="params"><span class="attr">oldValue</span>: <span class="title class_">SizeOptions</span>, <span class="attr">newValue</span>: <span class="title class_">SizeOptions</span></span>) =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure>
<h2 id="组件可见区域变化">组件可见区域变化</h2>
<ul>
<li>组件在屏幕中的显示区域面积变化时触发的事件</li>
<li>提供了判断组件是否完全或部分显示在屏幕中的能力，适用于广告曝光埋点之类的场景</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件可见区域变化时触发该回调</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title function_">onVisibleAreaChange</span>(<span class="attr">ratios</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;, <span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">isVisible</span>: <span class="built_in">boolean</span>, <span class="attr">currentRatio</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>): T</span><br></pre></td></tr></table></figure>
<h2 id="组件快捷键">组件快捷键</h2>
<ul>
<li>设置组合键的同时可以设置自定义事件，组合键按下时，触发该自定义事件</li>
<li>若没有设置自定义事件，则组合键行为与click行为一致</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置组件的自定义组合键</span></span><br><span class="line"><span class="title function_">keyboardShortcut</span>(<span class="attr">value</span>: <span class="built_in">string</span> | <span class="title class_">FunctionKey</span>, <span class="attr">keys</span>: <span class="title class_">Array</span>&lt;<span class="title class_">ModifierKey</span>&gt;, action?: <span class="function">() =&gt;</span> <span class="built_in">void</span>): T</span><br></pre></td></tr></table></figure>
<p>系统已存在的按键事件</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>获焦组件</th>
<th>用途</th>
<th>事件处理类别</th>
</tr>
</thead>
</table>
<p>方向键、Shift + 方向键  | 输入框组件 | 移动光标  | 输入法<br>
方向键、Shift + 方向键 | 通用组件  | 系统处于走焦状态时，用于方向走焦 | 系统按键<br>
TAB、Shift + TAB  | 通用组件  | 触发进入走焦状态/走焦 | 系统按键</p>
<h2 id="自定义事件分发">自定义事件分发</h2>
<ul>
<li>ArkUI在处理触屏事件时，会在触屏事件触发前进行按压点和组件区域的触摸测试，来收集需要响应触屏事件的组件，再基于触摸测试结果分发相应的触屏事件</li>
<li>可以通过onChildTouchTest决定如何让子节点去做触摸测试，影响子组件的触摸测试，最终影响后续的触屏事件分发</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前组件可通过设置回调来自定义子节点如何去做触摸测试</span></span><br><span class="line"><span class="title function_">onChildTouchTest</span>(<span class="attr">event</span>: <span class="function">(<span class="params"><span class="attr">value</span>: <span class="title class_">Array</span>&lt;<span class="title class_">TouchTestInfo</span>&gt;</span>) =&gt;</span> <span class="title class_">TouchResult</span>): T</span><br></pre></td></tr></table></figure>
<h2 id="自定义事件拦截">自定义事件拦截</h2>
<ul>
<li>为组件提供自定义的事件拦截能力</li>
<li>可根据事件在控件上按下时发生的位置，输入源等事件信息决定控件上的HitTestMode属性</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onTouchIntercept</span>(<span class="attr">callback</span>: <span class="title class_">Callback</span>&lt;<span class="title class_">TouchEvent</span>, <span class="title class_">HitTestMode</span>&gt;)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Harmony常用组件(2)——其他</title>
    <url>/posts/e93f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>其他</h1>
<h2 id="遍历组件">遍历组件</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ForEach</span>(<span class="variable language_">this</span>.<span class="property">list</span>,(<span class="attr">item</span>:<span class="title class_">Type</span>,idx)=&#123;</span><br><span class="line">	<span class="title function_">myComponent</span>(&#123;<span class="attr">myVal</span>:item&#125;) </span><br><span class="line">&#125;)</span><br><span class="line">struct myComponet&#123;</span><br><span class="line">	<span class="attr">myVal</span>:<span class="variable constant_">TYPE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Button">Button</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Button</span>(<span class="string">&#x27;sss&#x27;</span>)</span><br><span class="line">    .<span class="title function_">enabled</span>(<span class="variable language_">this</span>.<span class="property">isSelect</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Checkbox">Checkbox</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Checkbox</span>()</span><br><span class="line">    .<span class="title function_">select</span>($$this.<span class="property">isSelect</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Refresh">Refresh</h2>
<p>下拉刷新</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Refresh</span>(&#123;</span><br><span class="line">    <span class="attr">refreshing</span>:$$this.<span class="property">isRefresh</span>,</span><br><span class="line">    <span class="attr">builder</span>:<span class="variable language_">this</span>.<span class="title class_">Refresh</span>()&#125;)&#123;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">onRefreshing</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">	    <span class="variable language_">this</span>.<span class="title function_">changeRefreshLoading</span>()</span><br><span class="line">	    <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123;<span class="attr">message</span>:<span class="string">&#x27;ok&#x27;</span>&#125;)</span><br><span class="line">    &#125;,<span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="title class_">Refresh</span>()&#123;</span><br><span class="line">	<span class="title class_">Progress</span>(&#123;</span><br><span class="line">		<span class="attr">value</span>:<span class="variable language_">this</span>.<span class="property">freshVal</span>,</span><br><span class="line">		<span class="attr">total</span>:<span class="number">100</span>,</span><br><span class="line">		<span class="attr">type</span>:<span class="title class_">ProgressType</span>.<span class="property">Ring</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TextTimer">TextTimer</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">textTimerController</span>: <span class="title class_">TextTimerController</span> = <span class="keyword">new</span> <span class="title class_">TextTimerController</span>()</span><br><span class="line"><span class="title class_">TextTimer</span>(&#123; <span class="attr">isCountDown</span>: <span class="literal">false</span>, <span class="attr">controller</span>: <span class="variable language_">this</span>.<span class="property">textTimerController</span> &#125;)</span><br><span class="line">	.<span class="title function_">format</span>(<span class="variable language_">this</span>.<span class="property">format</span>)</span><br><span class="line">	.<span class="title function_">fontSize</span>(<span class="number">15</span>)</span><br><span class="line">	.<span class="title function_">margin</span>(&#123;<span class="attr">top</span>:<span class="number">20</span>&#125;)</span><br><span class="line">	.<span class="title function_">fontWeight</span>(<span class="title class_">FontWeight</span>.<span class="property">Bold</span>)</span><br><span class="line">    .<span class="title function_">onTimer</span>(<span class="function">(<span class="params"><span class="attr">utc</span>: <span class="built_in">number</span>, <span class="attr">elapsedTime</span>: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">textTimerController</span>.<span class="title function_">reset</span>()</span><br></pre></td></tr></table></figure>
<h2 id="Search">Search</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Search</span>()</span><br></pre></td></tr></table></figure>
<h2 id="Text">Text</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Text</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">toString</span>())</span><br><span class="line">	.<span class="title function_">textOverflow</span>(&#123; <span class="attr">overflow</span>: <span class="title class_">TextOverflow</span>.<span class="property">None</span> &#125;)</span><br><span class="line">	.<span class="title function_">maxLines</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Scroll">Scroll</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">scroller</span>:<span class="title class_">Scroller</span> = <span class="keyword">new</span> <span class="title class_">Scroller</span>()</span><br><span class="line"> <span class="title class_">Scroll</span>(<span class="variable language_">this</span>.<span class="property">scroller</span>) &#123;</span><br><span class="line"> 	</span><br><span class="line"> &#125;</span><br><span class="line">    .<span class="title function_">scrollable</span>(<span class="title class_">ScrollDirection</span>.<span class="property">Vertical</span>) </span><br><span class="line">    .<span class="title function_">scrollBar</span>(<span class="title class_">BarState</span>.<span class="property">On</span>) </span><br><span class="line">    .<span class="title function_">scrollBarColor</span>(<span class="title class_">Color</span>.<span class="property">Gray</span>) </span><br><span class="line">    .<span class="title function_">scrollBarWidth</span>(<span class="number">10</span>) </span><br><span class="line">    .<span class="title function_">edgeEffect</span>(<span class="title class_">EdgeEffect</span>.<span class="property">Spring</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Swiper">Swiper</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">swiperController</span>: <span class="title class_">SwiperController</span> = <span class="keyword">new</span> <span class="title class_">SwiperController</span>()</span><br><span class="line"><span class="title class_">Swiper</span>()</span><br><span class="line">  .<span class="title function_">index</span>($$this.<span class="property">idx</span>)</span><br><span class="line">  .<span class="title function_">autoPlay</span>(<span class="literal">false</span>)</span><br><span class="line">  .<span class="title function_">indicator</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>
<h2 id="TextInput">TextInput</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TextInput</span>(&#123;<span class="attr">placeholder</span>:<span class="string">&#x27;&#x27;</span>,<span class="attr">text</span>:&amp;&amp;<span class="variable language_">this</span>.<span class="property">message</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Divider">Divider</h2>
<p>下划线</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Divider</span>()</span><br></pre></td></tr></table></figure>
<h2 id="Image">Image</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Image</span>()</span><br><span class="line">    .<span class="title function_">borderRadius</span>()<span class="comment">//more large,more circle</span></span><br><span class="line">	.<span class="title function_">onAreaChange</span>((<span class="attr">oldValue</span>: <span class="title class_">Area</span>, <span class="attr">newValue</span>: <span class="function"><span class="params">Area</span>=&gt;</span> &#123;</span><br><span class="line">	     <span class="title class_">AlertDialog</span>.<span class="title function_">show</span>(&#123;</span><br><span class="line">            <span class="attr">message</span>:<span class="string">&#x27;f&#x27;</span>+newValue.<span class="property">width</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;))</span><br></pre></td></tr></table></figure>
<h2 id="弹窗">弹窗</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//showToast</span></span><br><span class="line">promptAction.<span class="title function_">showToast</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;nreivn&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//AlertDialog</span></span><br><span class="line"><span class="title class_">AlertDialog</span>.<span class="title function_">show</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//@customDialog</span></span><br><span class="line"><span class="comment">////父：</span></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Parent</span>&#123;</span><br><span class="line">  <span class="attr">controller</span>: <span class="title class_">CustomDialogController</span> = <span class="keyword">new</span> <span class="title class_">CustomDialogController</span>(&#123;</span><br><span class="line">    <span class="attr">builder</span>: <span class="title class_">Son1</span>(),</span><br><span class="line">    <span class="attr">autoCancel</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// alignment: DialogAlignment.Bottom,</span></span><br><span class="line">    <span class="attr">offset</span>: &#123; <span class="attr">dx</span>: <span class="number">0</span>, <span class="attr">dy</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="comment">// gridCount: 4,s</span></span><br><span class="line">    <span class="attr">customStyle</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// backgroundColor: 0xd9ffffff,</span></span><br><span class="line">    <span class="attr">cornerRadius</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">borderWidth</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// borderStyle: BorderStyle.Dashed,//使用borderStyle属性，需要和borderWidth属性一起使用</span></span><br><span class="line">    <span class="comment">// borderColor: Color.Blue,//使用borderColor属性，需要和borderWidth属性一起使用</span></span><br><span class="line">    <span class="comment">// shadow: (&#123; radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0&#125;),</span></span><br><span class="line">  &#125;)</span><br><span class="line">	<span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">controller</span>.<span class="title function_">open</span>()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//嵌套弹窗</span></span><br><span class="line"><span class="comment">////子1：</span></span><br><span class="line"><span class="meta">@CustomDialog</span></span><br><span class="line"><span class="keyword">export</span> struct <span class="title class_">Son1</span>&#123;</span><br><span class="line">  <span class="title class_">Controller1</span>: <span class="title class_">CustomDialogController</span> = <span class="keyword">new</span> <span class="title class_">CustomDialogController</span>(&#123;</span><br><span class="line">    <span class="attr">builder</span>: <span class="title class_">Son1</span>(),</span><br><span class="line">    <span class="attr">autoCancel</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// alignment: DialogAlignment.Bottom,</span></span><br><span class="line">    <span class="attr">offset</span>: &#123; <span class="attr">dx</span>: <span class="number">0</span>, <span class="attr">dy</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="comment">// gridCount: 4,</span></span><br><span class="line">    <span class="attr">customStyle</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// backgroundColor: 0xd9ffffff,</span></span><br><span class="line">    <span class="attr">cornerRadius</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">borderWidth</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// borderStyle: BorderStyle.Dashed,//使用borderStyle属性，需要和borderWidth属性一起使用</span></span><br><span class="line">    <span class="comment">// borderColor: Color.Blue,//使用borderColor属性，需要和borderWidth属性一起使用</span></span><br><span class="line">    <span class="comment">// shadow: (&#123; radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0&#125;),</span></span><br><span class="line">  &#125;)</span><br><span class="line">   <span class="title class_">Controller2</span>: <span class="title class_">CustomDialogController</span> = <span class="keyword">new</span> <span class="title class_">CustomDialogController</span>(&#123;</span><br><span class="line">    <span class="attr">builder</span>: <span class="title class_">Son2</span>(),</span><br><span class="line">    <span class="attr">autoCancel</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// alignment: DialogAlignment.Bottom,</span></span><br><span class="line">    <span class="attr">offset</span>: &#123; <span class="attr">dx</span>: <span class="number">0</span>, <span class="attr">dy</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="comment">// gridCount: 4,</span></span><br><span class="line">    <span class="attr">customStyle</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// backgroundColor: 0xd9ffffff,</span></span><br><span class="line">    <span class="attr">cornerRadius</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">borderWidth</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// borderStyle: BorderStyle.Dashed,//使用borderStyle属性，需要和borderWidth属性一起使用</span></span><br><span class="line">    <span class="comment">// borderColor: Color.Blue,//使用borderColor属性，需要和borderWidth属性一起使用</span></span><br><span class="line">    <span class="comment">// shadow: (&#123; radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0&#125;),</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">	 <span class="variable language_">this</span>.<span class="property">Controller1</span>.<span class="title function_">close</span>()</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">controller2</span>.<span class="title function_">open</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////子2：</span></span><br><span class="line"><span class="meta">@CustomDialog</span></span><br><span class="line"><span class="keyword">export</span> struct <span class="title class_">Son2</span>&#123;</span><br><span class="line">  <span class="attr">dialogController</span>: <span class="title class_">CustomDialogController</span> = <span class="keyword">new</span> <span class="title class_">CustomDialogController</span>(&#123;</span><br><span class="line">    <span class="attr">builder</span>: <span class="title class_">Son2</span>(),</span><br><span class="line">    <span class="attr">autoCancel</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// alignment: DialogAlignment.Bottom,</span></span><br><span class="line">    <span class="attr">offset</span>: &#123; <span class="attr">dx</span>: <span class="number">0</span>, <span class="attr">dy</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    <span class="comment">// gridCount: 4,</span></span><br><span class="line">    <span class="attr">customStyle</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// backgroundColor: 0xd9ffffff,</span></span><br><span class="line">    <span class="attr">cornerRadius</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">borderWidth</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// borderStyle: BorderStyle.Dashed,//使用borderStyle属性，需要和borderWidth属性一起使用</span></span><br><span class="line">    <span class="comment">// borderColor: Color.Blue,//使用borderColor属性，需要和borderWidth属性一起使用</span></span><br><span class="line">    <span class="comment">// shadow: (&#123; radius: 20, color: Color.Grey, offsetX: 50, offsetY: 0&#125;),</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">	 <span class="variable language_">this</span>.<span class="property">dialogController</span>.<span class="title function_">close</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony基本原理(3)——生命周期</title>
    <url>/posts/bfed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>组件</h1>
<ul>
<li>组件是 OpenHarmony 页面最小显示单元</li>
<li>为了让系统知道这是一个组件，需要使用 @Component 修饰符和 struct 关键字修饰</li>
<li>自定义组件禁止添加构造函数</li>
<li>必须实现 build()方法，该方法满足 Builder 构造器接口定义，用于定义组件的声明式 UI 描述</li>
<li>在组件创建或者组件内 @State 修饰的变量更新时系统都会自动调用 build() 方法刷新UI</li>
</ul>
<h1>系统组件生命周期</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onAppear</span>()</span><br><span class="line"><span class="title function_">onDisAppear</span>()</span><br></pre></td></tr></table></figure>
<h1>自定义组件生命周期</h1>
<p>@Component 修饰的组件，ArkUI开发框架会自动为其赋予私有的生命周期方法 aboutToAppear() 和 aboutToDisappear() ，它们用于通知开发者该自定义组件的生命周的变更</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数在创建自定义组件的新实例后，在执行其 build() 函数之前执行</span></span><br><span class="line"><span class="comment">//允许在该函数中改变状态变量，更改将在后续执行 build() 函数中生效</span></span><br><span class="line"><span class="title function_">aboutToAppear</span>()</span><br><span class="line"><span class="comment">//函数在自定义组件析构消耗之前执行</span></span><br><span class="line"><span class="comment">//不允许在该函数中改变状态变量，特别是 @Link 变量的修改可能会导致应用程序行为不稳定</span></span><br><span class="line"><span class="title function_">aboutToDisappear</span>()</span><br></pre></td></tr></table></figure>
<p>自定义组件有如下特点：</p>
<ul>
<li>可组合：允许开发人员组合使用内置组件和其他组件，以及公共属性和方法。</li>
<li>可重用：可以被其他组件重用，并作为不同的实例在不同的父组件或容器中使用；</li>
<li>有生命周期：生命周期的回调方法可以在组件中配置，用于业务逻辑处理；</li>
<li>数据驱动更新：可以由状态数据驱动，实现UI自动更新。</li>
</ul>
<h1>页面的生命周期</h1>
<ul>
<li>页面本质上也是一个组件，只是页面对于组件来讲多了一个修饰符 @Entry(表示当前组件是一个页面，需要在main_page.json中做配置)</li>
<li>除了具有组件的生命周期外，它还有自己独有的生命周期方法</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//页面显示时触发一次，包括路由过程、应用进入前后台等场景</span></span><br><span class="line"><span class="comment">//仅 @Entry 修饰的自定义组件生效</span></span><br><span class="line"><span class="title function_">onPageShow</span>()</span><br><span class="line"><span class="comment">//页面消失时触发一次，包括路由过程、应用进入前后台等场景</span></span><br><span class="line"><span class="comment">//仅 @Entry 修饰的自定义组件生效</span></span><br><span class="line"><span class="title function_">onPageHide</span>()</span><br><span class="line"><span class="comment">//当用户点击返回按钮时触发</span></span><br><span class="line"><span class="comment">//仅 @Entry 修饰的自定义组件生效</span></span><br><span class="line"><span class="comment">//返回 true 表示页面自己处理返回逻辑, 不进行页面路由</span></span><br><span class="line"><span class="comment">//返回 false 表示使用默认的返回逻辑</span></span><br><span class="line"><span class="comment">//不返回值会作为 false 处理</span></span><br><span class="line"><span class="title function_">onBackPress</span>()</span><br></pre></td></tr></table></figure>
<h1>系统组件、自定义组件、页面的对比</h1>
<table>
<thead>
<tr>
<th>函数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>onAppear(仅系统组件有)</td>
<td>组件从组件树上挂载的回调</td>
</tr>
<tr>
<td>onDisAppear(仅系统组件有)</td>
<td>系统组件独有的方法，组件从组件树上卸载的回调</td>
</tr>
<tr>
<td>aboutToReuse</td>
<td>组件复用时回调</td>
</tr>
<tr>
<td>aboutToAppear</td>
<td>1. 函数创建自定义组件的新实例后，在执行其 build() 函数之前执行一次<br>2. 允许在该函数中改变状态变量，更改将在后续执行 build() 函数中生效</td>
</tr>
<tr>
<td>aboutToDisappear</td>
<td>1. 函数在自定义组件析构消耗之前执行<br>2. 不允许在该函数中改变状态变量，特别是 @Link 变量的修改可能会导致应用程序行为不稳定</td>
</tr>
<tr>
<td>onPageShow(仅带@Entry的自定义组件有)</td>
<td>页面显示时触发该回调，包括路由过程、应用进入前后台等场景</td>
</tr>
<tr>
<td>onPageHide(仅带@Entry的自定义组件有)</td>
<td>页面消失时触发该回调，包括路由过程、应用进入前后台等场景</td>
</tr>
<tr>
<td>onBackPress(仅带@Entry的自定义组件有)</td>
<td>当用户点击返回按钮时触发，该方法返回 boolean 类型<br>true：表示页面自己处理返回逻辑, 不进行页面路由<br>false：表示使用默认的返回逻辑。不返回值会作为 false 处理</td>
</tr>
</tbody>
</table>
<ul>
<li>上面的回调函数是私有的，在运行时由开发框架在特定的时间进行调用，不能从应用程序中手动调用这些回调函数</li>
<li>允许在生命周期函数中使用 Promise 和异步回调函数，比如网络资源获取，定时器设置等</li>
<li>不允许在生命周期函数中使用 async await</li>
</ul>
<h1>具体页面构建过程</h1>
<h2 id="页面首次生成">页面首次生成</h2>
<ol>
<li>index.ets源码编译为目标文件(含创建UI的指令流)</li>
<li>生成Component树(C++层面的UI描述层)</li>
<li>进一步根据Component树生成Element树(Element是Component实例)</li>
<li>为每个Element创建对应RenderNode</li>
<li>渲染并绘制界面</li>
</ol>
<ul>
<li>Element表示具体组件结点，形成Element树维持界面运行时的树形结构，更新局部变化</li>
<li>RenderNode负责每个结点显示，形成Render树维持渲染界面需要的信息</li>
</ul>
<h2 id="数据更新后的页面渲染过程">数据更新后的页面渲染过程</h2>
<ol>
<li>@State修饰的变量发生变更，触发对应的getter/setter方法</li>
<li>状态管理模块定位对应的UI组件</li>
<li>状态管理模块更新对应的Element树</li>
<li>状态管理模块更新对应的RenderNode</li>
<li>渲染并绘制界面</li>
</ol>
<h1>UIAbility生命周期</h1>
<p>演示方法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EntryAbility中保持原样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在父组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; hilog &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.PerformanceAnalysisKit&#x27;</span>;</span><br><span class="line"><span class="title function_">aboutToAppear</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Father aboutToAppear&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">aboutToDisappear</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Father aboutToDisappear&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="title function_">onPageShow</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Father onPageShow&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onPageHide</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Father onPageHide&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; hilog &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.PerformanceAnalysisKit&#x27;</span>;</span><br><span class="line"><span class="title function_">aboutToAppear</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Child aboutToAppear&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">aboutToDisappear</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Child aboutToDisappear&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="title function_">onPageShow</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Child onPageShow&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onPageHide</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Child onPageHide&#x27;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="实例演示-用testTage过滤log信息">实例演示(用testTage过滤log信息)</h2>
<ol>
<li>创建<br>
Ability onCreate -&gt; Ability onWindowStageCreate -&gt; Ability onForeground -&gt; Succeeded in loading the content. <br><br>
-&gt; Father aboutToAppear -&gt; Child aboutToAppear -&gt; Father onPageShow<br>
(组件：父到子，Ability：外到内)</li>
<li>退到后台<br>
Ability onBackground -&gt; Father onPageHide</li>
<li>返回前台<br>
Ability onForeground</li>
<li>销毁<br>
Father aboutToDisappear -&gt; Child aboutToDisappear -&gt; Ability onWindowStageDestroy -&gt; Ability onDestroy<br>
(组件：父到子，Ability：内到外)</li>
</ol>
<h2 id="实例演示">实例演示</h2>
]]></content>
      <tags>
        <tag>鸿蒙基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony编年史</title>
    <url>/posts/88b0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony路由</title>
    <url>/posts/420d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>Harmony路由原理</h1>
<p>一个Ability里面的多个page可通过router进行切换。</p>
<h2 id="页面内">页面内</h2>
<p>页面内跳转是指所跳转的页面在同一个Ability内部，它们之间的跳转可以使用Router或者Navigator的方式</p>
<h2 id="页面间">页面间</h2>
<p>页面间跳转是指所跳转的页面属与不同的Ability，这种跳转需要借助featureAbility(featureAbility模块的startAbility()方法)实现<br>
featureAbility有如下方法：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">featureAbility</span> &#123;</span><br><span class="line">  <span class="comment">/**省略部分方法*/</span></span><br><span class="line">  <span class="comment">//打开指定 Ability 。默认第一个</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">startAbility</span>(<span class="params"><span class="attr">parameter</span>: <span class="title class_">StartAbilityParameter</span>, <span class="attr">callback</span>: <span class="title class_">AsyncCallback</span>&lt;<span class="built_in">number</span>&gt;</span>): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">startAbility</span>(<span class="params"><span class="attr">parameter</span>: <span class="title class_">StartAbilityParameter</span></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">startAbilityForResult</span>(<span class="params"><span class="attr">parameter</span>: <span class="title class_">StartAbilityParameter</span>, <span class="attr">callback</span>: <span class="title class_">AsyncCallback</span>&lt;<span class="title class_">AbilityResult</span>&gt;</span>): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">startAbilityForResult</span>(<span class="params"><span class="attr">parameter</span>: <span class="title class_">StartAbilityParameter</span></span>): <span class="title class_">Promise</span>&lt;<span class="title class_">AbilityResult</span>&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>featureAbility使用方式：</p>
<ol>
<li>创建targetAbility</li>
<li>在pages/index.ets中引入featureAbility(import featureAbility from ‘@ohos.ability.featureAbility’)</li>
<li>通过featureAbility.startAbility()打开目标ability</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pages/index.ets中在触发事件中使用</span></span><br><span class="line">featureAbility.<span class="title function_">startAbility</span>(&#123;</span><br><span class="line">            <span class="attr">want</span>: &#123;</span><br><span class="line">                <span class="comment">// 目标Ability所在的bundleName，也就是config.json里配置的bundleName</span></span><br><span class="line">                <span class="attr">bundleName</span>: <span class="string">&quot;com.example.myapplication&quot;</span>,</span><br><span class="line">                <span class="comment">// 目标Ability的全路径</span></span><br><span class="line">                <span class="attr">abilityName</span>: <span class="string">&quot;com.example.myapplication.targetAbility&quot;</span></span><br><span class="line">                <span class="comment">// 添加uri参数，指定打开创建targetAbility下的second页面。</span></span><br><span class="line">                <span class="attr">uri</span>: <span class="string">&quot;pages/second&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;Operation successful. Data: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Operation failed. Cause: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(error));</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>修改SettingAbility的默认首页面</li>
<li></li>
</ol>
<h1>页面内路由实现方式</h1>
<h2 id="Navigation组件">Navigation组件</h2>
<ul>
<li>Navigator本质上是对 Router 的封装</li>
<li>只能包含一个子组件</li>
<li>页面布局的根容器，用于设置页面标题栏、工具栏以及菜单栏</li>
<li>提供了 CustomBuilder 模式来自定义展示样式<br>
Navigation有如下属性：</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">NavigationAttribute</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CommonMethod</span>&lt;<span class="title class_">NavigationAttribute</span>&gt; &#123;</span><br><span class="line">    <span class="comment">//menus、toolBar</span></span><br><span class="line">    <span class="title function_">menus</span>(<span class="attr">value</span>: <span class="title class_">Array</span>&lt;<span class="title class_">NavigationMenuItem</span>&gt; | <span class="title class_">CustomBuilder</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">    <span class="title function_">toolBar</span>(<span class="attr">value</span>: <span class="built_in">object</span> | <span class="title class_">CustomBuilder</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">    <span class="title function_">title</span>(<span class="attr">value</span>: <span class="built_in">string</span> | <span class="title class_">CustomBuilder</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">    <span class="title function_">subTitle</span>(<span class="attr">value</span>: <span class="built_in">string</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">    <span class="title function_">hideTitleBar</span>(<span class="attr">value</span>: <span class="built_in">boolean</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">    <span class="title function_">hideBackButton</span>(<span class="attr">value</span>: <span class="built_in">boolean</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">    <span class="title function_">titleMode</span>(<span class="attr">value</span>: <span class="title class_">NavigationTitleMode</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">    <span class="title function_">hideToolBar</span>(<span class="attr">value</span>: <span class="built_in">boolean</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">    <span class="title function_">onTitleModeChange</span>(<span class="attr">callback</span>: <span class="function">(<span class="params"><span class="attr">titleMode</span>: <span class="title class_">NavigationTitleMode</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="title class_">NavigationAttribute</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="Navigation生命周期">Navigation生命周期</h3>
<ul>
<li>生命周期承载在NavDestination组件上，以组件事件的形式开放</li>
<li>可分为三类：自定义组件生命周期(aboutToAppear和aboutToDisappear，Navigation外面的自定义组件)、通用组件生命周期(OnAppear和OnDisappear)、自有生命周期(独有，共6个)<br>
<img src="/themes/butterfly/source/Harmony/NavLifeCircle.png" alt="Navigation生命周期" title="Navigation生命周期"></li>
</ul>
<table>
<thead>
<tr>
<th>周期方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>aboutToAppear</td>
<td>在创建自定义组件后，执行其build()函数之前执行（NavDestination创建之前），允许在该方法中改变状态变量，更改将在后续执行build()函数中生效。</td>
</tr>
<tr>
<td>onWillAppear</td>
<td>NavDestination创建后，挂载到组件树之前执行，在该方法中更改状态变量会在当前帧显示生效。</td>
</tr>
<tr>
<td>onAppear</td>
<td>通用生命周期事件，NavDestination组件挂载到组件树时执行。</td>
</tr>
<tr>
<td>onWillShow</td>
<td>NavDestination组件布局显示之前执行，此时页面不可见（应用切换到前台不会触发）。</td>
</tr>
<tr>
<td>onShown</td>
<td>NavDestination组件布局显示之后执行，此时页面已完成布局。</td>
</tr>
<tr>
<td>onWillHide</td>
<td>NavDestination组件触发隐藏之前执行（应用切换到后台不会触发）。</td>
</tr>
<tr>
<td>onHidden</td>
<td>NavDestination组件触发隐藏后执行（非栈顶页面push进栈，栈顶页面pop出栈或应用切换到后台）。</td>
</tr>
<tr>
<td>onWillDisappear</td>
<td>NavDestination组件即将销毁之前执行，如果有转场动画，会在动画前触发（栈顶页面pop出栈）。</td>
</tr>
<tr>
<td>onDisappear</td>
<td>通用生命周期事件，NavDestination组件从组件树上卸载销毁时执行。</td>
</tr>
<tr>
<td>aboutToDisappear</td>
<td>自定义组件析构销毁之前执行，不允许在该方法中改变状态变量。</td>
</tr>
</tbody>
</table>
<h3 id="动态路由表">动态路由表</h3>
<ol>
<li>src/main/resources/base/profile中创建文件route_map.json</li>
<li>在route_map.json中添加如下信息</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;routerMap&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;PageTest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pageSourceFile&quot;</span>: <span class="string">&quot;src/main/ets/pages/PageTest.ets&quot;</span>,</span><br><span class="line">      <span class="string">&quot;buildFunction&quot;</span>: <span class="string">&quot;PageTestBuilder&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>module.json5中注册路由</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;routerMap&quot;</span>: <span class="string">&quot;$profile:route_map&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Index Page</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">PageTestBuilder</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./PageTest&#x27;</span></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Index</span> &#123;</span><br><span class="line">  <span class="meta">@State</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">  <span class="attr">navPath</span>:<span class="title class_">NavPathStack</span> = <span class="keyword">new</span> <span class="title class_">NavPathStack</span>()</span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Column</span>()&#123;</span><br><span class="line">      <span class="title class_">Navigation</span>(<span class="variable language_">this</span>.<span class="property">navPath</span>)&#123;</span><br><span class="line">        <span class="title class_">Button</span>(<span class="string">&quot;Switch to Page Test&quot;</span>)</span><br><span class="line">          .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">navPath</span>.<span class="title function_">pushPath</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;PageTest&#x27;</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>Target Page</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">PageTestBuilder</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">PageTest</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> struct <span class="title class_">PageTest</span>&#123;</span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">NavDestination</span>() &#123;</span><br><span class="line">      <span class="title class_">Column</span>()&#123;</span><br><span class="line">        <span class="title class_">Button</span>(<span class="string">&#x27;PageTest&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="路由启动模式">路由启动模式</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">navPath</span>.<span class="title function_">pushPath</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;TargetPage&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">launchMode</span>:<span class="title class_">LaunchMode</span>.<span class="property">MOVE_TO_TOP_SINGLETON</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>默认：将被Push的路由，即使已在路由栈中，仍会继续添加</li>
<li>LaunchMode.MOVE_TO_TOP_SINGLETON：将从r3跳转到路由r2，若栈中为{r1,r2,r3}，则将r2置于栈顶，此时栈为{r1,r3,r2}</li>
</ol>
<h3 id="使用示例">使用示例</h3>
<p>最小示例：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Index</span> &#123;</span><br><span class="line">  <span class="comment">//API10以上</span></span><br><span class="line">  <span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Index</span> &#123;</span><br><span class="line">  <span class="comment">//API10及以上</span></span><br><span class="line">  <span class="comment">//创建路由栈</span></span><br><span class="line">  <span class="meta">@Provide</span>(<span class="string">&#x27;navPath&#x27;</span>) <span class="attr">navPath</span>:<span class="title class_">NavPathStack</span> = <span class="keyword">new</span> <span class="title class_">NavPathStack</span>()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Navigation</span>(<span class="variable language_">this</span>.<span class="property">navPath</span>)&#123;</span><br><span class="line">        <span class="title class_">Column</span>()&#123;</span><br><span class="line">          <span class="title class_">Button</span>(<span class="string">&#x27;switch page2&#x27;</span>)</span><br><span class="line">            .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">navPath</span>.<span class="title function_">pushPath</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;404&#x27;</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">          <span class="title class_">Button</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">            .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">navPath</span>.<span class="title function_">pushPath</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;404&#x27;</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .<span class="title function_">navDestination</span>(<span class="variable language_">this</span>.<span class="property">NavDes</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Builder</span></span><br><span class="line">  <span class="title class_">NavDes</span>(<span class="attr">name</span>:<span class="built_in">string</span>,<span class="attr">params</span>:<span class="built_in">object</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(name === <span class="string">&quot;page2&quot;</span>)</span><br><span class="line">      <span class="title class_">NavDestination</span>()&#123;</span><br><span class="line">        <span class="title class_">Text</span>(<span class="string">&#x27;page2&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">NavDestination</span>()&#123;</span><br><span class="line">        <span class="title function_">page3</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct page3&#123;</span><br><span class="line">  <span class="meta">@Consume</span>(<span class="string">&#x27;navPath&#x27;</span>) <span class="attr">navPath</span>:<span class="title class_">NavPathStack</span></span><br><span class="line">  <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Column</span>()&#123;</span><br><span class="line">      <span class="title class_">Button</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">        .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="comment">//pushPath会入栈，然this.navPath.replacePath不会，只会替换页面</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">navPath</span>.<span class="title function_">pushPath</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;page2&#x27;</span></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="comment">//以下两个联合使用可以返回首页</span></span><br><span class="line">          <span class="comment">//this.navPath.clear()</span></span><br><span class="line">          <span class="comment">//this.navPath.pop()</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传值示例</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">.<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">navPath</span>.<span class="title function_">replacePath</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;page2&#x27;</span>,</span><br><span class="line">    <span class="attr">param</span>:&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;mmmm&quot;</span></span><br><span class="line">    &#125; <span class="keyword">as</span> params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">interface</span> params&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从page2返回page1传参</span></span><br><span class="line"><span class="comment">////page1</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">navPath</span>.<span class="title function_">pushPath</span>(&#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;page3&#x27;</span>,</span><br><span class="line">              <span class="attr">param</span>:&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;mmmm&quot;</span></span><br><span class="line">              &#125; <span class="keyword">as</span> params,</span><br><span class="line">              <span class="attr">onPop</span>:<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(info) <span class="comment">//一个object，即info1和info2</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="comment">////page2</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">navPath</span>.<span class="title function_">pop</span>(&#123;</span><br><span class="line">  <span class="attr">info1</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  info2, <span class="string">&quot;&quot;</span>, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>样式示例</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="router（现已不推荐）">router（现已不推荐）</h2>
<ul>
<li>@Entry修饰的组件才可使用<br>
路由配置</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="comment">//pushUrl(options: RouterOptions, callback: AsyncCallback&lt;void&gt;): void</span></span><br><span class="line"><span class="keyword">import</span> &#123; router &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkUI&#x27;</span>;</span><br><span class="line">router.<span class="title function_">pushUrl</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;pages/PostPage&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="comment">//pushNamedRoute</span></span><br><span class="line"><span class="keyword">import</span> &#123; router &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkUI&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3</span></span><br><span class="line"><span class="comment">//最后在事件中调用routePage()函数即可</span></span><br><span class="line"><span class="keyword">import</span> &#123; router &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkUI&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BusinessError</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.BasicServicesKit&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">routePage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">options</span>:router.<span class="property">RouterOptions</span> = &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;pages/PostPage&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 建议使用this.getUIContext().getRouter().pushUrl()</span></span><br><span class="line">        <span class="keyword">await</span> router.<span class="title function_">pushUrl</span>(options)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;kkk&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">` fail callback, code: <span class="subst">$&#123;(err <span class="keyword">as</span> BusinessError).code&#125;</span>, msg: <span class="subst">$&#123;(err <span class="keyword">as</span> BusinessError).message&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//resouces/base/profile/main_pages.json中添加路径</span></span><br><span class="line"><span class="comment">//需从同pages层级的文件夹下开始索引</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;src&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;pages/Index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/PostPage&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Components/Notification&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>相关函数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取发起跳转的页面往当前页传入的参数</span></span><br><span class="line">router.<span class="title function_">getParams</span>(): <span class="title class_">Object</span></span><br><span class="line"><span class="comment">//获取当前在页面栈内的页面数量</span></span><br><span class="line">router.<span class="title function_">getLength</span>(): <span class="built_in">string</span></span><br><span class="line"><span class="comment">//获取栈顶的状态信息</span></span><br><span class="line">router.<span class="title function_">getState</span>(): <span class="title class_">RouterState</span></span><br><span class="line"><span class="comment">//通过索引值获取对应页面的状态信息</span></span><br><span class="line">router.<span class="title function_">getStateByIndex</span>(<span class="attr">index</span>: <span class="built_in">number</span>): <span class="title class_">RouterState</span> | <span class="literal">undefined</span></span><br><span class="line"><span class="comment">//清空页面栈中的所有历史页面，仅保留当前页面作为栈顶页面</span></span><br><span class="line">router.<span class="title function_">clear</span>(): <span class="built_in">void</span></span><br><span class="line"><span class="comment">//返回指定的页面，会删除当前页面与指定页面之间的所有页面</span></span><br><span class="line">router.<span class="title function_">back</span>(<span class="attr">index</span>: <span class="built_in">number</span>, params?: <span class="title class_">Object</span>): <span class="built_in">void</span></span><br><span class="line"><span class="comment">//跳转到指定的命名路由页面</span></span><br><span class="line">router.<span class="title function_">pushNamedRoute</span>(<span class="attr">options</span>: <span class="title class_">NamedRouterOptions</span>, <span class="attr">mode</span>: <span class="title class_">RouterMode</span>, <span class="attr">callback</span>: <span class="title class_">AsyncCallback</span>&lt;<span class="built_in">void</span>&gt;): <span class="built_in">void</span></span><br><span class="line"><span class="comment">//用指定的命名路由页面替换当前页面，并销毁被替换的页面</span></span><br><span class="line">router.<span class="title function_">replaceNamedRoute</span>(<span class="attr">options</span>: <span class="title class_">NamedRouterOptions</span>, <span class="attr">mode</span>: <span class="title class_">RouterMode</span>, <span class="attr">callback</span>: <span class="title class_">AsyncCallback</span>&lt;<span class="built_in">void</span>&gt;): <span class="built_in">void</span></span><br></pre></td></tr></table></figure>
<p>路由启动模式</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>传值示例</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.ets</span></span><br><span class="line"> router.<span class="title function_">pushUrl</span>(&#123;<span class="attr">url</span>:<span class="string">&quot;pages/Page2&quot;</span>,<span class="attr">params</span>:&#123;<span class="attr">key</span>:<span class="string">&quot;111&quot;</span>,<span class="attr">val</span>:<span class="string">&quot;222&quot;</span>&#125; <span class="keyword">as</span> <span class="title class_">Params</span>&#125;)</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Params</span>&#123;</span><br><span class="line">  <span class="attr">key</span>:<span class="built_in">string</span> </span><br><span class="line">  <span class="attr">val</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Page2.ets</span></span><br><span class="line"><span class="keyword">let</span> info = router.<span class="title function_">getParams</span>() <span class="keyword">as</span> <span class="title class_">Params</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = info.<span class="property">key</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">aboutToAppear</span>(): <span class="built_in">void</span> &#123; <span class="comment">//接收Page1传值</span></span><br><span class="line">  <span class="keyword">let</span> info = router.<span class="title function_">getParams</span>() <span class="keyword">as</span> <span class="title class_">Params</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = info.<span class="property">key</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">onPageShow</span>(): <span class="built_in">void</span> &#123;  <span class="comment">//接收Page3返回值</span></span><br><span class="line">  <span class="keyword">let</span> info = router.<span class="title function_">getParams</span>() <span class="keyword">as</span> <span class="title class_">Params</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = info.<span class="property">key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Page3.ets</span></span><br><span class="line">router.<span class="title function_">back</span>(&#123; <span class="comment">//向Page2返回值</span></span><br><span class="line">  <span class="attr">url</span>:<span class="string">&quot;pages/Page2&quot;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;<span class="attr">key</span>:<span class="string">&#x27;zzz&#x27;</span>,<span class="attr">val</span>:<span class="string">&quot;xxx&quot;</span>&#125; <span class="keyword">as</span> <span class="title class_">Params</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>Ability之间</h1>
<ol>
<li>配置<br>
EntryAbility-&gt;pages/ABtest<br>
TestAbility-&gt;pages/PayIndex<br>
传值：ABtest-&gt;PayIndex</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//module.json5</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;module&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;mainElement&quot;</span>: <span class="string">&quot;EntryAbility&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//通过new一个新的Ability生成</span></span><br><span class="line">   <span class="string">&quot;abilities&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;TestAbility&quot;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置初次进入的入口(EntryAbility.ets)</span></span><br><span class="line"><span class="title function_">onWindowStageCreate</span>(<span class="attr">windowStage</span>: <span class="variable language_">window</span>.<span class="property">WindowStage</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    windowStage.<span class="title function_">loadContent</span>(<span class="string">&#x27;pages/ABtest&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>跨Ability传值</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ABTest.ets，用于跳转到PayIndex。需注册路由(new一个page)</span></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="title class_">Button</span>(<span class="string">&quot;switch to pay&quot;</span>)</span><br><span class="line">        .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">pay</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">pay</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">MainContext</span> = <span class="title function_">getContext</span>() <span class="keyword">as</span> common.<span class="property">UIAbilityContext</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">want</span>:<span class="title class_">Want</span> = &#123;</span><br><span class="line">    <span class="comment">//目标包和目标Ability</span></span><br><span class="line">    <span class="attr">bundleName</span>:<span class="string">&quot;com.example.course&quot;</span>,<span class="comment">//项目根目录下AppScope/app.json5中的包名</span></span><br><span class="line">    <span class="attr">abilityName</span>:<span class="string">&quot;TestAbility&quot;</span>,</span><br><span class="line">    <span class="attr">parameters</span>:&#123;</span><br><span class="line">      <span class="attr">payId</span>:<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//向TestAbility传值</span></span><br><span class="line">  <span class="title class_">MainContext</span>.<span class="title function_">startAbility</span>(want)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//待跳转的TestAbility</span></span><br><span class="line">  <span class="comment">//接收ABTest的传值(onCreate只能执行一次，onNewWant可多次)</span></span><br><span class="line"><span class="title function_">onCreate</span>(<span class="attr">want</span>: <span class="title class_">Want</span>, <span class="attr">launchParam</span>: <span class="title class_">AbilityConstant</span>.<span class="property">LaunchParam</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onCreate&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(want.<span class="property">parameters</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> info = want.<span class="property">parameters</span>[<span class="string">&quot;payId&quot;</span>] <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">      <span class="title class_">AppStorage</span>.<span class="title function_">setOrCreate</span>(<span class="string">&quot;payId&quot;</span>,info)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳转到PayIndex</span></span><br><span class="line"><span class="title function_">onWindowStageCreate</span>(<span class="attr">windowStage</span>: <span class="variable language_">window</span>.<span class="property">WindowStage</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    windowStage.<span class="title function_">loadContent</span>(<span class="string">&#x27;pages/PayIndex&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PayIndex.ets，接收从传递的数据。需注册路由(new一个page)</span></span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@StorageProp</span>(<span class="string">&quot;payId&quot;</span>) <span class="attr">payId</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>接收返回值</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//PayIndex.ets向ABTest.ets传递返回值</span></span><br><span class="line">      <span class="title class_">Button</span>(<span class="string">&quot;返回值&quot;</span>)</span><br><span class="line">        .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> <span class="title class_">MainContext</span> = <span class="title function_">getContext</span>(<span class="variable language_">this</span>) <span class="keyword">as</span> common.<span class="property">UIAbilityContext</span></span><br><span class="line">          <span class="title class_">MainContext</span>.<span class="title function_">terminateSelfWithResult</span>(&#123;</span><br><span class="line">            <span class="attr">resultCode</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="attr">want</span>:&#123;</span><br><span class="line">              <span class="attr">bundleName</span>:<span class="string">&quot;com.example.course&quot;</span>,</span><br><span class="line">              <span class="attr">abilityName</span>:<span class="string">&quot;EntryAbility&quot;</span>,</span><br><span class="line">              <span class="attr">parameters</span>:&#123;</span><br><span class="line">                <span class="attr">type</span>:<span class="string">&quot;success&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">//ABTest.ets接收返回值</span></span><br><span class="line">  <span class="keyword">async</span>  <span class="title function_">pay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">MainContext</span> = <span class="title function_">getContext</span>() <span class="keyword">as</span> common.<span class="property">UIAbilityContext</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">want</span>:<span class="title class_">Want</span> = &#123;</span><br><span class="line">      <span class="attr">bundleName</span>:<span class="string">&quot;com.example.course&quot;</span>,</span><br><span class="line">      <span class="attr">abilityName</span>:<span class="string">&quot;TestAbility&quot;</span>,</span><br><span class="line">      <span class="attr">uri</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">deviceId</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">parameters</span>:&#123;</span><br><span class="line">        <span class="attr">payId</span>:<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// MainContext.startAbility(want)</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title class_">MainContext</span>.<span class="title function_">startAbilityForResult</span>(want)</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">resultCode</span> == <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = result.<span class="property">want</span>!.<span class="property">parameters</span>![<span class="string">&quot;type&quot;</span>] <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>跳转</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ABtest.ets</span></span><br><span class="line"> <span class="keyword">async</span>  <span class="title function_">pay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">MainContext</span> = <span class="title function_">getContext</span>() <span class="keyword">as</span> common.<span class="property">UIAbilityContext</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">want</span>:<span class="title class_">Want</span> = &#123;</span><br><span class="line">      <span class="attr">bundleName</span>:<span class="string">&quot;com.example.course&quot;</span>,</span><br><span class="line">      <span class="attr">abilityName</span>:<span class="string">&quot;TestAbility&quot;</span>,</span><br><span class="line">      <span class="comment">//应用内TestAbility下面的某个页面路由</span></span><br><span class="line">      <span class="attr">uri</span>:<span class="string">&quot;Index&quot;</span>,</span><br><span class="line">      <span class="comment">//分布式，发送到其他设备</span></span><br><span class="line">      <span class="attr">deviceId</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">parameters</span>:&#123;</span><br><span class="line">        <span class="attr">payId</span>:<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// MainContext.startAbility(want)</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title class_">MainContext</span>.<span class="title function_">startAbilityForResult</span>(want) <span class="comment">//1.promise参数表明可用await;2.注意外面得有async</span></span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">resultCode</span> == <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = result.<span class="property">want</span>!.<span class="property">parameters</span>![<span class="string">&quot;type&quot;</span>] <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//TestAbility</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">TestAbility</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UIAbility</span> &#123;</span><br><span class="line">  <span class="attr">url</span>:<span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="title function_">onWindowStageCreate</span>(<span class="attr">windowStage</span>: <span class="variable language_">window</span>.<span class="property">WindowStage</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// Main window is created, set main page for this ability</span></span><br><span class="line">    hilog.<span class="title function_">info</span>(<span class="number">0x0000</span>, <span class="string">&#x27;testTag&#x27;</span>, <span class="string">&#x27;%&#123;public&#125;s&#x27;</span>, <span class="string">&#x27;Ability onWindowStageCreate&#x27;</span>);</span><br><span class="line">    <span class="comment">//默认uri为pages/Index</span></span><br><span class="line">    <span class="keyword">let</span> uri = <span class="string">&quot;pages/Index&quot;</span></span><br><span class="line">    <span class="comment">//接收从ABtest.ets传送的uri，判断具体要转送到哪个页面路由</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">url</span>)&#123; </span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Index&quot;</span>:</span><br><span class="line">        uri = <span class="string">&quot;pages/Page2&quot;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一个参数 改为uri</span></span><br><span class="line">    windowStage.<span class="title function_">loadContent</span>(uri, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony小技巧(2)——组件</title>
    <url>/posts/60c4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>使用开源组件</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">ohpm install lite_chart</span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LiteChart</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;lite_chart&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>组件</h1>
<h2 id="aspectRatio-m-n">aspectRatio(m/n)</h2>
<p>m/n为宽高比</p>
<h2 id="布局调整">布局调整</h2>
<h3 id="layoutWeight-n">layoutWeight(n)</h3>
<p>n为占据的份额。可用于底部，这样底部上方的内容不会把底部挤掉</p>
<h3 id="margin">.margin({})</h3>
<h3 id="padding">.padding({})</h3>
<h2 id="stateStyles">stateStyles</h2>
<p>里面只能使用通用属性</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">stateStyles</span>(&#123;</span><br><span class="line">	<span class="attr">normal</span>:&#123;</span><br><span class="line">		.<span class="title function_">width</span>(<span class="number">130</span>)</span><br><span class="line">		.<span class="title function_">height</span>(<span class="number">130</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">pressed</span>:&#123;</span><br><span class="line">		.<span class="title function_">width</span>((<span class="number">180</span>))</span><br><span class="line">		.<span class="title function_">height</span>(<span class="number">180</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	 <span class="attr">disabled</span>:&#123;</span><br><span class="line">		.<span class="title function_">backgroundColor</span>(<span class="title class_">Color</span>.<span class="property">Green</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">selected</span>:&#123;</span><br><span class="line">		.<span class="title function_">width</span>(<span class="number">280</span>)</span><br><span class="line">		.<span class="title function_">height</span>(<span class="number">280</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	focused    :&#123;</span><br><span class="line">		.<span class="title function_">width</span>(<span class="number">280</span>)</span><br><span class="line">		.<span class="title function_">height</span>(<span class="number">280</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="zIndex-n">.zIndex(n)</h2>
<p>在父容器中的层级，n越高层级越高</p>
]]></content>
  </entry>
  <entry>
    <title>Harmony小技巧(4)——命令与按键</title>
    <url>/posts/3916/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>构建相关</h1>
<h2 id="命令">命令</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hvigorw taskTree</td>
<td>根据工程中的模块获取模块中注册的任务树(上一行依赖更短的下一行，因此下一行先执行)</td>
</tr>
<tr>
<td>hdc shell</td>
<td>进入设备的shell命令行</td>
</tr>
<tr>
<td>ps -p <pid> -T</td>
<td>查看指定应用进程的线程信息(<pid>为需要指定的应用进程的进程ID)</td>
</tr>
</tbody>
</table>
<h1>观察</h1>
<h2 id="按键">按键</h2>
<p>预览——&gt;查看变量是否保存到磁盘——&gt;com.YOUR_PROJECT/haps/preferences</p>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony三层架构</title>
    <url>/posts/2764/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>层次说明</h1>
<table>
<thead>
<tr>
<th>层次</th>
<th>说明</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>产品层(products)</td>
<td>HAP，即应用整体</td>
<td>可安装和运行在不同设备上</td>
</tr>
<tr>
<td>功能层(features)</td>
<td>HSP，动态共享，应用的功能</td>
<td>1.不能独立运行，需要依赖于产品 Hap 包<br>2.可有page页面</td>
</tr>
<tr>
<td>资源(common)</td>
<td>HAR，静态共享库，功能依赖的资源</td>
<td>1.不能独立运行<br>2.没有page页面</td>
</tr>
</tbody>
</table>
<h1>HSP和HAR</h1>
<h2 id="特点">特点</h2>
<ul>
<li>HSP不支持在设备上单独安装/运行，需要与依赖该HSP的HAP一起安装/运行。HSP的版本号必须与HAP版本号一致。</li>
<li>HSP不支持在配置文件中声明UIAbility组件与ExtensionAbility组件。</li>
<li>HSP可以依赖其他HAR或HSP，但不支持循环依赖，也不支持依赖传递。</li>
</ul>
<h2 id="两者异同">两者异同</h2>
<p>相同点:</p>
<ol>
<li>模块间资源共享</li>
<li>不支持在设备上单独安装/运行</li>
<li>不支持在配置文件中声明UIAbility组件与文档中心组件</li>
<li>不支持循环依赖，也不支持依赖传递</li>
</ol>
<p>不同点:</p>
<ol>
<li>har 发布二方或三方仓使用(hsp 不可以)2.har 中不支持在配置文件中声明pages页面3. hsp 中支持在配置文件中声明pages页面</li>
<li>hsR多模块依赖只会打包一份</li>
<li>hsp 支持按需加载</li>
</ol>
<h1>使用方法</h1>
<ol>
<li>根目录下创建products、features、commons，分别对应三层结构</li>
<li>三层内部组成如下：</li>
</ol>
<ul>
<li>products：创建Module-&gt;entry ability或者feature ability。即Phone、Tablet、Car等具体设备</li>
<li>features：创建Module-&gt;Shared Library。即HSP</li>
<li>commons：创建Module-&gt;Static Library。即HAR，常命名为base</li>
</ul>
<ol start="3">
<li>commons</li>
</ol>
<ul>
<li>在common/basic/src下新建utils(存放工具)、constants(常量，格式为“AAA=aaa_aaa”)、api、components、models文件夹</li>
<li>上一条每一个文件夹下新建index.ets，并写入&quot; export * from ‘./xxx’ &quot;。xxx为同文件夹下的文件</li>
<li>在commons的index.ets里同样写入&quot; export * from ‘…/xxx’ &quot;。</li>
</ul>
<ol start="4">
<li>features<br>
配置依赖。</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//features/oh-package.json5</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;dependencies&quot;</span>:&#123;</span><br><span class="line">        <span class="comment">//前面的basic全部小写，且与后面的basic同名(这里可不管大小写，但名称要相同)</span></span><br><span class="line">        <span class="string">&quot;basic&quot;</span>: <span class="string">&quot;file:../common/basic&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>products<br>
配置依赖。</li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//products/Phone或其他/oh-package.json5</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;dependencies&quot;</span>:&#123;</span><br><span class="line">        <span class="comment">//前面的myfeature全部小写，且与后面的MyFeature同名(这里可不管大小写，但名称要相同)</span></span><br><span class="line">        <span class="string">&quot;myfeature&quot;</span>: <span class="string">&quot;file:../../features/MyFeature/&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>构建</li>
</ol>
<ul>
<li>Run Configurations中选择运行哪一个(Phone还是其他)</li>
<li>如果出现依赖未安装，点击Run-&gt;Edit Configurations-&gt;Deploy Multi Hap标签页，勾选要安装的依赖包</li>
</ul>
<ol start="7">
<li>版本管理</li>
</ol>
<ul>
<li>VCS-&gt;Enable Vesion Control Integrations</li>
<li>全选左侧文件，并右键后选择Git-&gt;add</li>
<li>点击上方栏Git-&gt;commit</li>
<li>点击上方栏Git-&gt;Manage Remote，配置远程仓库(注意远程仓库得是空仓，否则push不上去)</li>
<li>点击上方栏Git-&gt;push，输入账户和密码</li>
</ul>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony小技巧(3)——快捷键</title>
    <url>/posts/ae08/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>生成代码</h1>
<table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>根据父类模板快速生成子类(extends继承) 方法</td>
<td>Ctrl+O</td>
</tr>
<tr>
<td>为类快速生成一个对应的构造函数</td>
<td>Alt+Insert</td>
</tr>
</tbody>
</table>
<h1>阅读代码</h1>
<table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>快速生成注释信息</td>
<td>“/**”+回车键</td>
</tr>
<tr>
<td>搜索工程里的所有内容</td>
<td>连击2次shift</td>
</tr>
<tr>
<td>查看变量赋值、引用情况</td>
<td>点击对象+Alt+F7</td>
</tr>
<tr>
<td>清除未使用的import</td>
<td>Ctrl+Alt+O</td>
</tr>
<tr>
<td>查看接口/类的继承关系结构</td>
<td>Ctrl+H</td>
</tr>
<tr>
<td>代码结构树</td>
<td>Alt+7或Ctrl+F12</td>
</tr>
<tr>
<td>快速导入包</td>
<td>Alt+Shift+Enter</td>
</tr>
<tr>
<td>取消缩进</td>
<td>Shift+Tab</td>
</tr>
<tr>
<td>注释</td>
<td>Ctrl+/</td>
</tr>
<tr>
<td>代码格式化</td>
<td>Ctrl+Alt+L <br>代码块前增加“//@formatter:off”，并在该代码块的最后增加“//@formatter:on”，即表示对该范围的代码块不需要进行格式化操作</td>
</tr>
<tr>
<td>跳转查看类型详情</td>
<td>Ctrl+B</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>文学批评理论(1)——自由人文主义</title>
    <url>/posts/ce1e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>历史</h1>
<table>
<thead>
<tr>
<th>年代</th>
<th>人物</th>
<th>主要思想</th>
</tr>
</thead>
<tbody>
<tr>
<td>公元前4世纪</td>
<td>亚里士多德</td>
<td>1. 《诗学》中的“悲剧”定义：文学关乎人物，人物体现于行动<br>2. 划分了情节发展的阶段<br>3. “读者中心”批评法，试图描述戏剧对观众的影响</td>
</tr>
<tr>
<td>19世纪</td>
<td>莫里斯(F.D. Maurice)</td>
<td>文学是中产阶级特有的财富与观念表达，使人感到自己属于自己的国家</td>
</tr>
<tr>
<td>19世纪</td>
<td>马修·阿诺德(Matthew Arnold)</td>
<td>用世俗、语言文化代替宗教</td>
</tr>
<tr>
<td>19世纪</td>
<td>弗里曼(Edward Freeman)</td>
<td>文学研究必须和语言研究一起，否则不是学术</td>
</tr>
<tr>
<td>20世纪</td>
<td>理查兹(Ivor Armstrong Richards)</td>
<td>1. 语义分析+心理研究-&gt;新批评体系<br>2. 严格区分文学与语言<br>3. 实用批评：将文本从历史、语境中剥离</td>
</tr>
<tr>
<td>20世纪</td>
<td>燕卜荪(William Empson)，理查兹的学生</td>
<td>《含混七型》，通过词语分析确定诗歌的七个含混</td>
</tr>
<tr>
<td>20世纪</td>
<td>艾略特(T.S. Eliot)</td>
<td></td>
</tr>
<tr>
<td>20世纪</td>
<td>利维斯()</td>
<td>利维斯主义</td>
</tr>
</tbody>
</table>
<h2 id="派系">派系</h2>
<h1>自由人文主义准则</h1>
<ol>
<li>看待文学的态度。优秀的文学超越时间、历史局限性，与永恒人性对话</li>
<li>on-sight close reading。文本包含自身的意义，无需放入政治、历史、自传性等具体语境中</li>
<li>to see the object as in itself it really is(阿诺德语)。仅对文本进行细致分析，抛却其他一切</li>
<li>人性不变</li>
<li>坚信超验主体，个体本性超越于社会、经验等环境的力量</li>
<li>文学根本目的是美化生活、宣扬人文。但不可系统化</li>
<li>形式和内容需融合为有机整体，有其一，则必有其二，否则就是奇技淫巧</li>
<li>文学要诚挚，即经验的真实、对自我诚实、同情、感受。只能从文本内发现，体现于切身感受、个性色彩描写、低调表白之中</li>
<li>默默呈现而非直白解说，并让思想通过具体形式呈现而不能流于抽象空洞</li>
<li>批评即阐释文本，作为读者与文本的中介。自由人文主义者认为所有观念都是被预设的、横亘在人与文本之间的阻碍</li>
</ol>
<h1>名词解释</h1>
<h1>阅后总结</h1>
<h2 id="卡塔西斯-Cathaasis-效应">卡塔西斯(Cathaasis)效应</h2>
]]></content>
      <tags>
        <tag>文学批评</tag>
      </tags>
  </entry>
  <entry>
    <title>文学批评理论(2)——结构主义</title>
    <url>/posts/c1c6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>历史</h1>
<h1></h1>
<h1></h1>
]]></content>
      <tags>
        <tag>文学批评</tag>
      </tags>
  </entry>
  <entry>
    <title>文学批评概论</title>
    <url>/posts/4ca/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <tags>
        <tag>文学批评</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown示例</title>
    <url>/posts/ed04/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- 标题 -->
<h1>标题</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 标题1</span></span><br><span class="line"><span class="section">## 标题2</span></span><br></pre></td></tr></table></figure>
<h1>粗体与斜体</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### 斜体</span></span><br><span class="line">Italicized text is the <span class="emphasis">*cat&#x27;s meow*</span> # 斜体</span><br><span class="line">A<span class="emphasis">*cat*</span>meow # 斜体（突出中间部分）</span><br><span class="line"><span class="section">### 粗体</span></span><br><span class="line"><span class="strong">**bold text**</span></span><br><span class="line"><span class="strong">__bold text__</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<h3 id="斜体">斜体</h3>
<p>Italicized text is the <em>cat’s meow</em> # 斜体<br>
A<em>cat</em>meow # 斜体（突出中间部分）</p>
<h3 id="粗体">粗体</h3>
<p><strong>bold text</strong><br>
<strong>bold text</strong></p>
<h1>代码块</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 上面三个\`，下面三个\`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>引用</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 嵌套引用</span></span><br><span class="line"><span class="quote">&gt; Dorothy followed her through many of the beautiful rooms in her castle.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;&gt; The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</span></span><br><span class="line"><span class="section">## 带其他元素的引用</span></span><br><span class="line"><span class="quote">&gt; #### The quarterly results look great!</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; - Revenue was off the chart.</span></span><br><span class="line"><span class="quote">&gt; - Profits were higher than ever.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;  <span class="emphasis">*Everything*</span> is going according to <span class="strong">**plan**</span>.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<h2 id="嵌套引用">嵌套引用</h2>
<blockquote>
<p>Dorothy followed her through many of the beautiful rooms in her castle.</p>
<blockquote>
<p>The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.</p>
</blockquote>
</blockquote>
<h2 id="带其他元素的引用">带其他元素的引用</h2>
<blockquote>
<h4 id="The-quarterly-results-look-great">The quarterly results look great!</h4>
<ul>
<li>Revenue was off the chart.</li>
<li>Profits were higher than ever.</li>
</ul>
<p><em>Everything</em> is going according to <strong>plan</strong>.</p>
</blockquote>
<h1>列表</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## 有序列表</span></span><br><span class="line"><span class="bullet">1.</span> First item</span><br><span class="line"><span class="bullet">2.</span> Second item</span><br><span class="line"><span class="bullet">3.</span> Third item</span><br><span class="line"><span class="bullet">4.</span> Fourth item</span><br><span class="line"><span class="section">## 无序列表</span></span><br><span class="line"><span class="bullet">-</span> First item</span><br><span class="line"><span class="bullet">+</span> Second item</span><br><span class="line"><span class="bullet">-</span> Third item</span><br><span class="line"><span class="bullet">    -</span> Indented item</span><br><span class="line"><span class="bullet">    -</span> Indented item</span><br><span class="line"><span class="bullet">*</span> Fourth item</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<h2 id="有序列表">有序列表</h2>
<ol>
<li>First item</li>
<li>Second item</li>
<li>Third item</li>
<li>Fourth item</li>
</ol>
<h2 id="无序列表">无序列表</h2>
<ul>
<li>First item</li>
</ul>
<ul>
<li>Second item</li>
</ul>
<ul>
<li>Third item
<ul>
<li>Indented item</li>
<li>Indented item</li>
</ul>
</li>
</ul>
<ul>
<li>Fourth item</li>
</ul>
<h1>分割线</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">________________<span class="emphasis">_</span></span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<h1>链接</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是一个链接 [<span class="string">Markdown语法</span>](<span class="link">https://markdown.com.cn &quot;标题&quot;</span>)。</span><br><span class="line"><span class="language-xml">&lt;https://markdown.com.cn&gt;</span></span><br><span class="line"><span class="section">## 格式化</span></span><br><span class="line">I love supporting the <span class="strong">**[<span class="string">EFF</span>](<span class="link">https://eff.org</span>)**</span>.</span><br><span class="line">This is the <span class="emphasis">*[<span class="string">Markdown Guide</span>](<span class="link">https://www.markdownguide.org</span>)*</span>.</span><br><span class="line">See the section on [<span class="string">`code`</span>](<span class="link">#code</span>).</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>
这是一个链接 <a href="https://markdown.com.cn" title="标题">Markdown语法</a>。<br>
<a href="https://markdown.com.cn">https://markdown.com.cn</a></p>
<h2 id="格式化">格式化</h2>
<p>I love supporting the <strong><a href="https://eff.org">EFF</a></strong>.<br>
This is the <em><a href="https://www.markdownguide.org">Markdown Guide</a></em>.<br>
See the section on <a href="#code"><code>code</code></a>.</p>
<h1>图片</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">这是图片</span>](<span class="link">/assets/img/philly-magic-garden.jpg &quot;Magic Gardens&quot;</span>)</span><br><span class="line"><span class="section">## 链接图片</span></span><br><span class="line">[<span class="string">![沙漠中的岩石图片</span>](<span class="link">/assets/img/shiprock.jpg &quot;Shiprock&quot;</span>)](<span class="link">https://markdown.com.cn</span>) </span><br></pre></td></tr></table></figure>
<p>效果如下：<br>
<img src="/assets/img/philly-magic-garden.jpg" alt="这是图片" title="Magic Gardens"></p>
<h2 id="链接图片">链接图片</h2>
<p><a href="https://markdown.com.cn"><img src="/assets/img/shiprock.jpg" alt="沙漠中的岩石图片" title="Shiprock"></a></p>
<h1>流程图</h1>
<p>详见<img src="https://mermaid.js.org/syntax/flowchart.html" alt="https://mermaid.js.org/syntax/flowchart.html"><br>
最小示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># options contains:</span></span><br><span class="line"><span class="section"># TB - Top to bottom</span></span><br><span class="line"><span class="section"># TD - Top-down/ same as top to bottom</span></span><br><span class="line"><span class="section"># BT - Bottom to top</span></span><br><span class="line"><span class="section"># RL - Right to left</span></span><br><span class="line"><span class="section"># LR - Left to right</span></span><br><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">flowchart [options]</span><br><span class="line"><span class="code">    A[Start] --&gt; B&#123;Is it?&#125;</span></span><br><span class="line"><span class="code">    B -- Yes --&gt; C[OK]</span></span><br><span class="line"><span class="code">    C --&gt; D[Rethink]</span></span><br><span class="line"><span class="code">    D --&gt; B</span></span><br><span class="line"><span class="code">    B -- No ----&gt; E[End]</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>
<!-- # 参考文献
需"npm install hexo-reference --save"安装插件。
```Markdown
### 引用文献的语句
<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[]()
``` -->">[1]</span></a></sup>
<h3 id="引用参考文献：">引用参考文献：</h3>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href=""></a>
``` --&gt;<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/posts/b5e3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony通用信息(1)——通用属性</title>
    <url>/posts/bbc6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>通用属性</h1>
<h2 id="尺寸">尺寸</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//缺省时使用元素自身内容需要的宽/高</span></span><br><span class="line"><span class="comment">//若子组件的宽/高大于父组件的宽/高，则会画出父组件的范围</span></span><br><span class="line"><span class="comment">//从API version 10开始，该接口支持calc计算特性</span></span><br><span class="line"><span class="title function_">width</span>(<span class="attr">value</span>: <span class="title class_">Length</span>)</span><br><span class="line"><span class="title function_">height</span>(<span class="attr">value</span>: <span class="title class_">Length</span>)</span><br><span class="line"><span class="comment">//从API version 10开始，该接口支持calc计算特性</span></span><br><span class="line"><span class="title function_">size</span>(<span class="attr">value</span>: <span class="title class_">SizeOptions</span>)</span><br><span class="line"><span class="comment">//从API version 10开始，该接口支持calc计算特性</span></span><br><span class="line"><span class="title function_">padding</span>(<span class="attr">value</span>: <span class="title class_">Padding</span> | <span class="title class_">Length</span> | <span class="title class_">LocalizedPadding</span>)</span><br><span class="line"><span class="title function_">margin</span>(<span class="attr">value</span>: <span class="title class_">Margin</span> | <span class="title class_">Length</span> | <span class="title class_">LocalizedMargin</span>)</span><br><span class="line"><span class="comment">//对子组件进行重新布局</span></span><br><span class="line"><span class="comment">//子元素与兄弟元素占主轴尺寸按照权重进行分配</span></span><br><span class="line"><span class="comment">//忽略元素本身尺寸设置</span></span><br><span class="line"><span class="comment">//表示自适应占满剩余空间</span></span><br><span class="line"><span class="title function_">layoutWeight</span>(<span class="attr">value</span>: <span class="built_in">number</span> | <span class="built_in">string</span>)</span><br><span class="line"><span class="comment">//设置约束尺寸，组件布局时，进行尺寸范围限制</span></span><br><span class="line"><span class="comment">//优先级高于Width和Height</span></span><br><span class="line"><span class="title function_">constraintSize</span>(<span class="attr">value</span>: <span class="title class_">ConstraintSizeOptions</span>)</span><br><span class="line"><span class="title function_">constraintSize</span>(minWidth/maxWidth/minHeight/maxHeight)</span><br></pre></td></tr></table></figure>
<h2 id="位置">位置</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 布局约束</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="Flex布局">Flex布局</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 边框</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="图片边框">图片边框</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 背景</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br><span class="line"><span class="title function_">background</span>(<span class="attr">builder</span>: <span class="title class_">CustomBuilder</span>, options?: &#123; align?: <span class="title class_">Alignment</span> &#125;)</span><br><span class="line"><span class="title function_">backgroundColor</span>(<span class="attr">value</span>: <span class="title class_">ResourceColor</span>)</span><br><span class="line"><span class="title function_">backgroundImage</span>(<span class="attr">src</span>: <span class="title class_">ResourceStr</span> | <span class="title class_">PixelMap</span>, repeat?: <span class="title class_">ImageRepeat</span>)</span><br><span class="line"><span class="title function_">backgroundImageSize</span>(<span class="attr">value</span>: <span class="title class_">SizeOptions</span> | <span class="title class_">ImageSize</span>)</span><br><span class="line"><span class="title function_">backgroundImagePosition</span>(<span class="attr">value</span>: <span class="title class_">Position</span> | <span class="title class_">Alignment</span>)</span><br></pre></td></tr></table></figure>
<h2 id="透明度">透明度</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">opacity</span>(<span class="attr">value</span>: <span class="built_in">number</span> | <span class="title class_">Resource</span>)</span><br></pre></td></tr></table></figure>
<h2 id="显隐控制">显隐控制</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">visibility</span>(<span class="attr">value</span>: <span class="title class_">Visibility</span>)</span><br></pre></td></tr></table></figure>
<h2 id="禁用控制">禁用控制</h2>
<p>设置组件是否可交互</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">enabled</span>(<span class="attr">value</span>: <span class="built_in">boolean</span>)</span><br></pre></td></tr></table></figure>
<h2 id="浮层">浮层</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在当前组件上，增加遮罩文本或者叠加自定义组件以及ComponentContent作为该组件的浮层</span></span><br><span class="line"><span class="title function_">overlay</span>(<span class="attr">value</span>: <span class="built_in">string</span> | <span class="title class_">CustomBuilder</span> | <span class="title class_">ComponentContent</span>, options?: <span class="title class_">OverlayOptions</span> )</span><br></pre></td></tr></table></figure>
<h2 id="Z序">Z序</h2>
<p>设置组件的堆叠顺序</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">zIndex</span>(<span class="attr">value</span>: <span class="built_in">number</span>)</span><br></pre></td></tr></table></figure>
<h2 id="图形变换">图形变换</h2>
<p>对组件进行旋转、平移、缩放、矩阵变换等操作</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">rotate</span>(<span class="attr">value</span>: <span class="title class_">RotateOptions</span>)</span><br><span class="line"><span class="comment">//平移</span></span><br><span class="line"><span class="title function_">translate</span>(<span class="attr">value</span>: <span class="title class_">TranslateOptions</span>)</span><br><span class="line"><span class="comment">//缩放</span></span><br><span class="line"><span class="title function_">scale</span>(<span class="attr">value</span>: <span class="title class_">ScaleOptions</span>)</span><br><span class="line"><span class="comment">//变换矩阵</span></span><br><span class="line"><span class="title function_">transform</span>(<span class="attr">value</span>: <span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>
<h2 id="图像效果">图像效果</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模糊</span></span><br><span class="line"><span class="title function_">blur</span>(<span class="attr">value</span>: <span class="built_in">number</span>, options?: <span class="title class_">BlurOptions</span>)</span><br><span class="line"><span class="title function_">shadow</span>(<span class="attr">value</span>: <span class="title class_">ShadowOptions</span> | <span class="title class_">ShadowStyle</span>)</span><br><span class="line"><span class="comment">//灰度</span></span><br><span class="line"><span class="title function_">grayscale</span>(<span class="attr">value</span>: <span class="built_in">number</span>)</span><br><span class="line"><span class="comment">//高光</span></span><br><span class="line"><span class="title function_">brightness</span>(<span class="attr">value</span>: <span class="built_in">number</span>)</span><br><span class="line"><span class="comment">//饱和度</span></span><br><span class="line"><span class="title function_">saturate</span>(<span class="attr">value</span>: <span class="built_in">number</span>)</span><br><span class="line"><span class="comment">//对比度</span></span><br><span class="line"><span class="title function_">contrast</span>(<span class="attr">value</span>: <span class="built_in">number</span>)</span><br><span class="line"><span class="comment">//反转</span></span><br><span class="line"><span class="title function_">invert</span>(<span class="attr">value</span>: <span class="built_in">number</span> | <span class="title class_">InvertOptions</span>)</span><br><span class="line"><span class="comment">//转为深褐色</span></span><br><span class="line"><span class="title function_">sepia</span>(<span class="attr">value</span>: <span class="built_in">number</span>)</span><br><span class="line"><span class="comment">//色相旋转</span></span><br><span class="line"><span class="title function_">hueRotate</span>(<span class="attr">value</span>: <span class="built_in">number</span> | <span class="built_in">string</span>)</span><br><span class="line"><span class="comment">//颜色添加</span></span><br><span class="line"><span class="title function_">colorBlend</span>(<span class="attr">value</span>: <span class="title class_">Color</span> | <span class="built_in">string</span> | <span class="title class_">Resource</span>)</span><br><span class="line"><span class="title function_">linearGradientBlur</span>(<span class="attr">value</span>: <span class="built_in">number</span>, <span class="attr">options</span>: <span class="title class_">LinearGradientBlurOptions</span>)</span><br><span class="line"><span class="comment">//设置当前控件和子控件是否先整体离屏渲染绘制后再与父控件融合绘制</span></span><br><span class="line"><span class="title function_">renderGroup</span>(<span class="attr">value</span>: <span class="built_in">boolean</span>)</span><br><span class="line"><span class="comment">//将当前控件的内容（包含子节点内容）与下方画布（可能为离屏画布）已有内容进行混合</span></span><br><span class="line"><span class="title function_">blendMode</span>(<span class="attr">value</span>: <span class="title class_">BlendMode</span>, <span class="keyword">type</span>?: <span class="title class_">BlendApplyType</span>)</span><br></pre></td></tr></table></figure>
<h2 id="形状裁剪">形状裁剪</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 栅格</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="颜色渐变">颜色渐变</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">linearGradient</span>(<span class="attr">value</span>: &#123;angle?: <span class="built_in">number</span> | <span class="built_in">string</span>; direction?: <span class="title class_">GradientDirection</span>; <span class="attr">colors</span>: <span class="title class_">Array</span>&lt;[<span class="title class_">ResourceColor</span>, <span class="built_in">number</span>]&gt;; repeating?: <span class="built_in">boolean</span>;&#125;)</span><br><span class="line"><span class="comment">//角度渐变</span></span><br><span class="line"><span class="title function_">sweepGradient</span>(<span class="attr">value</span>: &#123;<span class="attr">center</span>: [<span class="title class_">Length</span>, <span class="title class_">Length</span>]; start?: <span class="built_in">number</span> | <span class="built_in">string</span>; end?: <span class="built_in">number</span> | <span class="built_in">string</span>; rotation?: <span class="built_in">number</span> | <span class="built_in">string</span>; <span class="attr">colors</span>: <span class="title class_">Array</span>&lt;[<span class="title class_">ResourceColor</span>, <span class="built_in">number</span>]&gt;; repeating?: <span class="built_in">boolean</span>;&#125;)</span><br><span class="line"><span class="comment">//径向渐变</span></span><br><span class="line"><span class="title function_">radialGradient</span>(<span class="attr">value</span>: &#123; <span class="attr">center</span>: [<span class="title class_">Length</span>, <span class="title class_">Length</span>]; <span class="attr">radius</span>: <span class="built_in">number</span> | <span class="built_in">string</span>; <span class="attr">colors</span>: <span class="title class_">Array</span>&lt;[<span class="title class_">ResourceColor</span>, <span class="built_in">number</span>]&gt;; repeating?: <span class="built_in">boolean</span> &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Popup">Popup</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bindPopup</span>(<span class="attr">show</span>: <span class="built_in">boolean</span>, <span class="attr">popup</span>: <span class="title class_">PopupOptions</span> | <span class="title class_">CustomPopupOptions</span>)</span><br></pre></td></tr></table></figure>
<h2 id="菜单">菜单</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 焦点</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="悬浮态">悬浮态</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 组件标识</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="复用标识">复用标识</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 多态样式</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="分布式迁移标识">分布式迁移标识</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 前景色</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="前景属性">前景属性</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 组件内容模糊</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="运动模糊">运动模糊</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 点击回弹</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="无障碍">无障碍</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 动态属性</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="动态手势">动态手势</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 外描边</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="视效">视效</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 自定义绘制</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义内容">自定义内容</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 自定义属性</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="触摸交互">触摸交互</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 模态转场</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="隐私遮罩">隐私遮罩</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 文本通用</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br><span class="line"><span class="title function_">fontColor</span>(<span class="attr">value</span>: <span class="title class_">ResourceColor</span>)</span><br><span class="line"><span class="title function_">fontSize</span>(<span class="attr">value</span>: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="title class_">Resource</span>)</span><br><span class="line"><span class="title function_">fontStyle</span>(<span class="attr">value</span>: <span class="title class_">FontStyle</span>)</span><br><span class="line"><span class="title function_">fontWeight</span>(<span class="attr">value</span>: <span class="built_in">number</span> | <span class="title class_">FontWeight</span> | <span class="built_in">string</span>)</span><br><span class="line"><span class="title function_">fontFamily</span>(<span class="attr">value</span>: <span class="built_in">string</span> | <span class="title class_">Resource</span>)</span><br><span class="line"><span class="comment">//设置文本的文本行高，设置值不大于0时，不限制文本行高，自适应字体大小</span></span><br><span class="line"><span class="title function_">lineHeight</span>(<span class="attr">value</span>: <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="title class_">Resource</span>)</span><br><span class="line"><span class="comment">//设置文本装饰线样式及其颜色</span></span><br><span class="line"><span class="title function_">decoration</span>(<span class="attr">value</span>: <span class="title class_">DecorationStyleInterface</span>)</span><br></pre></td></tr></table></figure>
<h2 id="拖拽">拖拽</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 安全区域</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="组件内容填充">组件内容填充</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 事件独占</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
<h2 id="鼠标光标">鼠标光标</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">## 特效绘制合并</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">Ts</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>博客所用插件记录</title>
    <url>/posts/1495/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony通用组件开发集锦(1)</title>
    <url>/posts/c09f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1></h1>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony疑难杂症(1)——模拟器</title>
    <url>/posts/441a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>版本号</h1>
<p>DevEco Studio NEXT Release<br><br>
Build #DS-233.14475.28.36.503900<br><br>
Build Version: 5.0.3.900, built on October 8, 2024<br><br>
Runtime version: 17.0.10+1-b1087.17 amd64<br><br>
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.<br><br>
Windows 11.0<br><br>
GC: G1 Young Generation, G1 Old Generation<br><br>
Memory: 2048M<br><br>
Cores: 8<br><br>
Registry:<br>
idea.plugins.compatible.build=IC-233.14475.28<br><br>
Non-Bundled Plugins:<br>
com.griffin.jsontotypescriptclass (1.0.2)</p>
<h1>问题</h1>
<table>
<thead>
<tr>
<th>问题说明</th>
<th>解决方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>调试时上传唤起相机白屏</td>
<td>杀掉相机进程，再点开相机，最后返回再度唤起相机即可</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony疑难杂症(2)——布局</title>
    <url>/posts/9daf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>版本号</h1>
<p>DevEco Studio NEXT Release<br><br>
Build #DS-233.14475.28.36.503900<br><br>
Build Version: 5.0.3.900, built on October 8, 2024<br><br>
Runtime version: 17.0.10+1-b1087.17 amd64<br><br>
VM: OpenJDK 64-Bit Server VM by JetBrains s.r.o.<br><br>
Windows 11.0<br><br>
GC: G1 Young Generation, G1 Old Generation<br><br>
Memory: 2048M<br><br>
Cores: 8<br><br>
Registry:<br>
idea.plugins.compatible.build=IC-233.14475.28<br><br>
Non-Bundled Plugins:<br>
com.griffin.jsontotypescriptclass (1.0.2)</p>
<h1>问题</h1>
<table>
<thead>
<tr>
<th>问题说明</th>
<th>解决方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>将子组件置于父组件左上角</td>
<td>.aligin(AlignMent.TopStart)属性</td>
</tr>
<tr>
<td>Grid高度自适应</td>
<td>动态计算高度，.height(Math.floor(this.imgList.length / 列数 + 1) * 行高)</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony状态管理</title>
    <url>/posts/8fb2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>实时渲染必备条件</h1>
<ol>
<li>有状态修饰器</li>
<li>第一层级数据改变<br>
但@Builder原则上只展示界面，不涉及状态相关，不改变数据</li>
</ol>
<h1>相关组件</h1>
<h2 id="Stata">@Stata</h2>
<p>驱动界面刷新</p>
<h2 id="Prop">@Prop</h2>
<ul>
<li>单向传值，父传子，只传一次</li>
<li>深拷贝，父与子各有一份完全独立的数据(独立内存区域)</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="attr">val</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Son</span>(&#123;<span class="attr">val</span>:val&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="meta">@Prop</span> val</span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Link">@Link</h2>
<ul>
<li>双向传值</li>
<li>浅拷贝，父与子共用一份数据</li>
</ul>
<h3 id="示例">示例</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="attr">val</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Son</span>(&#123;<span class="attr">val</span>:val&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="meta">@Link</span> <span class="attr">val</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Provide和-Consume">@Provide和@Consume</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@eEntry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="meta">@Provide</span> <span class="attr">val</span>:<span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Son</span>(&#123;<span class="attr">val</span>:val&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="meta">@Consume</span> <span class="attr">val</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Obeserved和-ObjectLink">@Obeserved和@ObjectLink</h2>
<h3 id="概述">概述</h3>
<ul>
<li>@ObjectLink不能在@entry内</li>
</ul>
<h3 id="示例-2">示例</h3>
<h4 id="常规用法">常规用法</h4>
<p>@entry组件：通过将@State修饰的变量a:A，赋值给View组件，即View({a.attr:a.attr})<br>
View组件：通过@ObjectLink attr，观察和修改a的属性attr<br>
@Observer A：有成员a类型为BasicClassA<br>
@Observer BasicClassA：有属性attr</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="嵌套对象">嵌套对象</h4>
<h2 id="Track">@Track</h2>
<p>属性改变时，只刷新自己的内容。如果不加，则会刷新整个类所有与界面绑定的属性的内容</p>
<ul>
<li>仅在类内使用</li>
<li>类中只要有一个属性使用了，其他与界面相关的属性都必须添加</li>
</ul>
<h2 id="Watch">@Watch</h2>
<h2 id="">$$</h2>
<h1>持久化与全局变量</h1>
<p>Localstorage、Appstorage、PersistenStorage</p>
<h2 id="LocalStorage">@LocalStorage</h2>
<ul>
<li>在一个Ability内数据共享，局限性大，基本用不上</li>
<li>一般只用于服务卡片<br>
###示例</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Page1————————————————————————————</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;=&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="title class_">Let</span> <span class="attr">storage</span>:<span class="title class_">LocalStorage</span>=<span class="keyword">new</span> <span class="title class_">LocalStorage</span>(data)</span><br><span class="line"><span class="comment">//将storage注入到页面里面</span></span><br><span class="line"><span class="meta">@Entry</span>(storage)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Page1</span> &#123;</span><br><span class="line">    <span class="title function_">aboutToAppear</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=storage.<span class="title function_">get</span>(<span class="string">&quot;age&quot;</span>) <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">        storage.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Page2————————————————————————————</span></span><br><span class="line"><span class="keyword">import</span> &#123;storage&#125; <span class="keyword">from</span> <span class="title class_">Page1</span></span><br><span class="line"><span class="meta">@Entry</span>(storage)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">Page2</span> &#123;</span><br><span class="line">    <span class="title function_">aboutToAppear</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=storage.<span class="title function_">get</span>(<span class="string">&quot;age&quot;</span>) <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="AppStorage">@AppStorage</h2>
<ul>
<li>AppStorage缓存在应用进程内，应用结束后数据也随之销毁</li>
<li>AppStorage持久化则可以缓存到磁盘，即@PersistentStorage</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">AppStorage</span>.<span class="title function_">setOrCreate</span>(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="title class_">AppStorage</span>.<span class="title function_">get</span>(<span class="string">&quot;userName&quot;</span>)<span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line"><span class="comment">//单向传值，不会写回AppStorage中，即父(storage)传子</span></span><br><span class="line"><span class="meta">@StorageProp</span>(<span class="string">&quot;name&quot;</span>) <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">//双向传值，会写回AppStorage中</span></span><br><span class="line"><span class="meta">@StorageLink</span>(<span class="string">&quot;name&quot;</span>) <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="PersistentStorage">@PersistentStorage</h2>
<p>用于辅助AppStorage持久化到磁盘</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PersistentStorage</span>.<span class="title function_">persistProp</span>(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="meta">@Entry</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">AppStoragecase03</span> &#123;</span><br><span class="line">    <span class="meta">@StorageProp</span>(<span class="string">&quot;userName&quot;</span>)<span class="attr">userName</span>:<span class="built_in">string</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">struct <span class="title class_">PrefrencePage</span>&#123;</span><br><span class="line">    store_name=<span class="string">&quot;DEFAULT&quot;</span></span><br><span class="line">    <span class="title function_">build</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Button</span>(<span class="string">&quot;持久化缓存数据&quot;</span>)</span><br><span class="line">        .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//参数：context，仓库名称</span></span><br><span class="line">            <span class="comment">//context:上下文参数 Ability Application</span></span><br><span class="line">            <span class="comment">//仓库名称</span></span><br><span class="line">            preferences.<span class="title function_">getPreferences</span>(<span class="title function_">getContext</span>(<span class="variable language_">this</span>),<span class="variable language_">this</span>.<span class="property">store_name</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//val是prefrences首选项对象</span></span><br><span class="line">            val.<span class="title function_">putSync</span>(<span class="string">&quot;userName&quot;</span>,<span class="variable language_">this</span>.<span class="property">message</span>)</span><br><span class="line">            <span class="comment">//写入到磁盘</span></span><br><span class="line">            val.<span class="title function_">flush</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title class_">Button</span>(<span class="string">&quot;获取持久化的数舞&quot;</span>)</span><br><span class="line">        .<span class="title function_">onClick</span>(<span class="function">()=&gt;</span>&#123;    </span><br><span class="line">            preferences.<span class="title function_">getPreferences</span>(<span class="title function_">getContext</span>(<span class="variable language_">this</span>),<span class="variable language_">this</span>.<span class="property">store_name</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">//读取数据</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">result</span>=val.<span class="title function_">getSync</span>(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;&quot;</span>)<span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态模式</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; preferences &#125;<span class="keyword">from</span> <span class="string">&#x27;@kit.ArkData&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Context</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ohos.arkui.uIcontext&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PreferencesUtil</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="attr">storeName</span>:<span class="built_in">string</span> =<span class="string">&quot;DEFAULT&quot;</span></span><br><span class="line">    <span class="comment">//async代表该函数异步</span></span><br><span class="line">    <span class="comment">//await与async同时出现</span></span><br><span class="line">    <span class="comment">//获取仓库</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">getPreferenInstance</span>(<span class="params"><span class="attr">context</span>:<span class="title class_">Context</span>, storeName?:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> store = storeName != <span class="literal">undefined</span> ? storeName : <span class="title class_">PrefrencesUtil</span>.<span class="property">storeName</span></span><br><span class="line">        <span class="comment">//await 等待这个函数执行完毕 拿到结果</span></span><br><span class="line">        <span class="keyword">let</span> preferences = avait preferences.<span class="title function_">getPreferences</span>(context,store)</span><br><span class="line">        <span class="keyword">return</span> preferences</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给仓库设置值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">putInfo</span>(<span class="params"><span class="attr">context</span>: context, <span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: <span class="built_in">string</span>, storeName?:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> preferences = <span class="keyword">await</span> preferencesUtil.<span class="title function_">getPreferenInstance</span>(context, storeName)</span><br><span class="line">        preferences.<span class="title function_">putsync</span>(key,value)</span><br><span class="line">        <span class="keyword">await</span> preferences.<span class="title function_">flush</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">aboutToAppear</span>():<span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt;&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">result</span> = <span class="keyword">await</span> <span class="title class_">PreferencesUtil</span>.<span class="title function_">getInfo</span>(<span class="title function_">getContext</span>(<span class="variable language_">this</span>),<span class="variable language_">this</span>.<span class="property">key_name</span>) <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单例模式</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; preferences &#125;<span class="keyword">from</span> <span class="string">&#x27;@kit.ArkData&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Context</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ohos.arkui.uIcontext&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prefrencesutils</span> &#123;</span><br><span class="line"><span class="comment">//获取仓库对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">pre</span>: preferences.<span class="property">ValueType</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">getInstances</span>(<span class="params"><span class="attr">context</span>:<span class="title class_">Context</span></span>)&#123;</span><br><span class="line">        <span class="comment">//保证程序里面只有一个preferences 对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">PrefrencesUtils</span>.<span class="property">pre</span>!=<span class="literal">undefined</span> ll <span class="title class_">Prefrencesutils</span>.<span class="property">pre</span>!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">PrefrencesUtils</span>.<span class="property">pre</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">PrefrencesUtils</span>.<span class="property">pre</span> = preferences.<span class="title function_">getPreferences</span>(context, <span class="string">&quot;DEFAULT&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">PrefrencesUtils</span>.<span class="property">pre</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">putInfo</span>(<span class="params"><span class="attr">context</span>: <span class="title class_">Context</span>, <span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> prefrences = <span class="keyword">await</span> <span class="title class_">PrefrencesUtils</span>.<span class="title function_">getInstances</span>(context)</span><br><span class="line">        prefrences.<span class="title function_">putsync</span>(key,value)</span><br><span class="line">        prefrences.<span class="title function_">flush</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EventHub">EventHub</h2>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony网络相关</title>
    <url>/posts/cf3a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>Get方式</h1>
<h2 id="根据JSON内容设置接口">根据JSON内容设置接口</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果是数组，则用data:Data[] = []</span></span><br><span class="line"><span class="comment">//如果是具体类型，则用dataModule:DataModule = new DataModule</span></span><br><span class="line"><span class="title class_">Interface</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="attr">data1</span>:<span class="title class_">CommonType</span></span><br><span class="line">    <span class="attr">data2</span>:sonType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataModule</span> <span class="keyword">implements</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="attr">data1</span>:<span class="title class_">CommonType</span></span><br><span class="line">    <span class="attr">data2</span>:specialType</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">info</span>:<span class="title class_">Data</span></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data1</span> = info.<span class="property">data1</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data2</span> = info.<span class="property">data2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">specialType</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="meta">@State</span> <span class="attr">dataList</span>:<span class="title class_">DataModule</span>[] = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">DataModule</span>(&#123;<span class="attr">data1</span>:xx,<span class="attr">data2</span>:yy&#125;),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">DataModule</span>(&#123;<span class="attr">data1</span>:xx,<span class="attr">data2</span>:yy&#125;),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="获取">获取</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; http &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.NetworkKit&#x27;</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment">//创建http</span></span><br><span class="line"><span class="keyword">let</span> httpRequest = http.<span class="title function_">createHttp</span>()</span><br><span class="line"><span class="comment">//请求</span></span><br><span class="line"><span class="comment">//含method,header</span></span><br><span class="line">httpRequest.<span class="title function_">request</span>(url,&#123;</span><br><span class="line">  <span class="attr">method</span>:http.<span class="property">RequestMethod</span>.<span class="property">GET</span>,</span><br><span class="line">  <span class="attr">header</span>:&#123;</span><br><span class="line">    <span class="attr">cookie</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">agent</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">info</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">result</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(info.<span class="property">result</span>.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Json.stringify()</span></span><br></pre></td></tr></table></figure>
<h2 id="使用">使用</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">xxx</span>?.<span class="property">yyy</span></span><br></pre></td></tr></table></figure>
<h2 id="申请网络权限">申请网络权限</h2>
<p>src/main/resources/module.json5中的module添加&quot;requestPermissions&quot;: [{“name”: “ohos.permission.INTERNET”<br>
}],</p>
<h1>模板</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; http &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.NetworkKit&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; promptAction &#125; <span class="keyword">from</span> <span class="string">&#x27;@kit.ArkUI&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BaseRespData</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../models/BaseRespData&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型，让调用者决定是什么类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> requestHttp&lt;T&gt;(<span class="attr">url</span>:<span class="built_in">string</span>,<span class="attr">method</span>:http.<span class="property">RequestMethod</span>=http.<span class="property">RequestMethod</span>.<span class="property">GET</span>,data?:<span class="built_in">object</span>):<span class="title class_">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> httpRequest = http.<span class="title function_">createHttp</span>()</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">options</span>:http.<span class="property">HttpRequestOptions</span>=&#123;</span><br><span class="line">    <span class="attr">header</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">method</span>:method,</span><br><span class="line">    <span class="attr">extraData</span>:data,</span><br><span class="line">    <span class="attr">readTimeout</span>:<span class="number">10</span>*<span class="number">1000</span>,</span><br><span class="line">    <span class="attr">connectTimeout</span>:<span class="number">10</span>*<span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> httpResult = <span class="keyword">await</span> httpRequest.<span class="title function_">request</span>(url,options)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;???:&#x27;</span>+httpResult.<span class="property">result</span>.<span class="title function_">toString</span>())</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (httpResult.<span class="property">responseCode</span> === <span class="number">401</span>) &#123;</span><br><span class="line">      promptAction.<span class="title function_">showToast</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;Token已过期&quot;</span>&#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>((<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(httpResult))))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(httpResult.<span class="property">responseCode</span> === <span class="number">404</span>)&#123;</span><br><span class="line">      promptAction.<span class="title function_">showToast</span>((&#123;<span class="attr">message</span>:<span class="string">&quot;请求地址错误&quot;</span>&#125;))</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(httpResult)))</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(httpResult.<span class="property">result</span>.<span class="title function_">toString</span>()) <span class="keyword">as</span> <span class="title class_">BaseRespData</span>&lt;T&gt;</span><br><span class="line">      <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> result.<span class="property">data</span></span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        promptAction.<span class="title function_">showToast</span>(&#123;<span class="attr">message</span>:<span class="string">&quot;业务执行失败&quot;</span>+result.<span class="property">msg</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;业务执行失败&quot;</span>)+result.<span class="property">msg</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;网络请求错误&quot;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(err))</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;网络请求错误&quot;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(err)))</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    httpRequest.<span class="title function_">destroy</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/3eeb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://ghchart.rshah.org/kcsx" alt=""></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Harmony小技巧(1)——语法</title>
    <url>/posts/ca8a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>语法</h1>
<h2 id="值传递与引用字面量传递">值传递与引用字面量传递</h2>
<h3 id="值传递">值传递</h3>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//father</span></span><br><span class="line"><span class="title function_">myComponent</span>(<span class="variable language_">this</span>.<span class="property">params</span>)</span><br><span class="line"><span class="comment">//son</span></span><br><span class="line"><span class="meta">@Builder</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myComponent</span>(<span class="params">params</span>)&#123;</span><br><span class="line">	params</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="引用字面量传递">引用字面量传递</h3>
<p>引用字面量必须带&quot;{}&quot;，且值传递无法让父组件的值刷新</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">myComponent</span>(&#123;<span class="attr">attr1</span>:a1,<span class="attr">attr2</span>:a2&#125;)</span><br><span class="line"><span class="comment">//son</span></span><br><span class="line"><span class="meta">@Builder</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myComponent</span>(<span class="params">params</span>)&#123;</span><br><span class="line">	params.<span class="property">attr1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Params</span>&#123;</span><br><span class="line">	<span class="attr">attr1</span>:<span class="title class_">Attr1</span></span><br><span class="line">	<span class="attr">attr2</span>:<span class="title class_">Attr2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="取反">取反</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">doLike</span>:<span class="function">(<span class="params"><span class="attr">item</span>:<span class="title class_">ReplyItemModel</span></span>)=&gt;</span><span class="built_in">void</span> =<span class="function">(<span class="params"><span class="attr">item</span>: <span class="title class_">ReplyItemModel</span></span>)=&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="传入匿名函数">传入匿名函数</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">click</span>=!<span class="variable language_">this</span>.<span class="property">clic</span></span><br></pre></td></tr></table></figure>
<h2 id="类型断言">类型断言</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">xx <span class="keyword">as</span> <span class="title class_">Type</span></span><br><span class="line"><span class="attr">data</span>:<span class="title class_">GoodsModule</span>=<span class="keyword">new</span> <span class="title class_">GoodsModule</span>(&#123;&#125; <span class="keyword">as</span> <span class="title class_">GoodsInfo</span>)</span><br></pre></td></tr></table></figure>
<h1>对Object数组排序</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(sortMethod===<span class="literal">true</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">commentsInfoArr</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params"><span class="attr">x</span>:<span class="title class_">CommentsInfo</span>,<span class="attr">y</span>:<span class="title class_">CommentsInfo</span></span>)=&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (x.<span class="property">date</span> &gt;y.<span class="property">date</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x.<span class="property">date</span> &lt;y.<span class="property">date</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>&#125;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="对Object数组去重">对Object数组去重</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">newCart</span>:<span class="title class_">Foods</span>[] = []</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">shoppingCartArr</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params"><span class="attr">item</span>:<span class="title class_">Foods</span></span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> newCart.<span class="title function_">includes</span>(item)?<span class="string">&#x27;&#x27;</span>:newCart.<span class="title function_">push</span>(item)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">shoppingCartArr</span> = newCart</span><br></pre></td></tr></table></figure>
<h2 id="日期格式化">日期格式化</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="attr">now</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="meta">@State</span> <span class="attr">formattedDate</span>: <span class="built_in">string</span> = <span class="variable language_">this</span>.<span class="property">now</span>.<span class="title function_">toLocaleDateString</span>(<span class="string">&quot;en-US&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="随机数">随机数</h2>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">rnd = <span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="variable constant_">RANGE</span></span><br></pre></td></tr></table></figure>
<h2 id="时间相关">时间相关</h2>
<h3 id="setTimeout">setTimeout</h3>
<p>t时间后才执行</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">	&#125;,t)</span><br></pre></td></tr></table></figure>
<h3 id="setInterval">setInterval</h3>
<p>每隔t时间执行一次</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">taskId</span>:<span class="built_in">number</span> = -<span class="number">1</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">taskId</span> = <span class="title function_">setTnterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">	++<span class="variable language_">this</span>.<span class="property">cnt</span></span><br><span class="line">	<span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">taskId</span>)</span><br><span class="line">&#125;,t)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony国际化</title>
    <url>/posts/8fe/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>配置路径</h1>
<p>resources/base/element/string.json<br>
resources/zh-CN/element/string.jsonresources/base/</p>
<h1>添加条目</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;module_desc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;value&quot;</span>: <span class="string">&quot;module description&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1>使用</h1>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Text</span>($r(<span class="string">&quot;app.string.calculator&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
</search>
